@model List<BigBank.Models.SavingsAccount>

@{
    ViewBag.Title = "View Savings Accounts";
    string currentSort = ViewBag.SortColumn as string ?? "SBAccountID";
    string currentDir = ViewBag.SortDir as string ?? "asc";
    int currentPage = ViewBag.Page;
    int pageSize = ViewBag.PageSize;
    int totalPages = ViewBag.TotalPages;
    int totalCount = ViewBag.TotalCount;
    
    Func<string,string> sortLink = col => {
        var dir = (currentSort == col && currentDir == "asc") ? "desc" : "asc";
        return Url.Action("ViewSavingsAccounts", new { page = currentPage, pageSize = pageSize, sort = col, dir = dir });
    };
    
    Func<string,string> sortIndicator = col => {
        if (string.Equals(currentSort, col, StringComparison.OrdinalIgnoreCase))
        {
            return currentDir == "asc" ? " ?" : " ?";
        }
        return string.Empty;
    };
    
    Func<int,string> pageLink = page => {
        return Url.Action("ViewSavingsAccounts", new { page = page, pageSize = pageSize, sort = currentSort, dir = currentDir });
    };
}

<div class="container py-4">
    <h2>Savings Accounts</h2>

    <div class="card">
        <div class="card-body">
            <h5 class="card-title">All Savings Accounts</h5>
            
            <div class="mb-3">
                <div class="row">
                    <div class="col-md-8">
                        <input type="text" id="searchBox" class="form-control" placeholder="Search by Account ID or Customer ID..." />
                    </div>
                    <div class="col-md-4 text-end">
                        <div class="d-inline-block">
                            <label class="me-2">Page Size:</label>
                            <select id="pageSizeSelect" class="form-select form-select-sm d-inline-block w-auto">
                                <option value="10" @(pageSize == 10 ? "selected" : "")>10</option>
                                <option value="20" @(pageSize == 20 ? "selected" : "")>20</option>
                                <option value="50" @(pageSize == 50 ? "selected" : "")>50</option>
                                <option value="100" @(pageSize == 100 ? "selected" : "")>100</option>
                            </select>
                        </div>
                    </div>
                </div>
                <small class="text-muted">Total: <span id="totalCount">@totalCount</span> account(s)</small>
            </div>

            <div class="table-responsive">
                <table class="table table-sm mb-0" id="accountsTable">
                    <thead class="thead-light">
                        <tr>
                            <th style="width:6%;">Sr. No.</th>
                            <th style="width:20%;"><a href="@sortLink("SBAccountID")">Account ID@Html.Raw(sortIndicator("SBAccountID"))</a></th>
                            <th style="width:20%;"><a href="@sortLink("CustID")">Customer ID@Html.Raw(sortIndicator("CustID"))</a></th>
                            <th style="width:20%;"><a href="@sortLink("Balance")">Balance@Html.Raw(sortIndicator("Balance"))</a></th>
                            <th style="width:20%;"><a href="@sortLink("CreatedOn")">Created On@Html.Raw(sortIndicator("CreatedOn"))</a></th>
                            <th style="width:10%;">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model != null && Model.Count > 0)
                        {
                            int startingNumber = (currentPage - 1) * pageSize + 1;
                            for (int i = 0; i < Model.Count; i++)
                            {
                                var acc = Model[i];
                                <tr>
                                    <td>@(startingNumber + i)</td>
                                    <td>@acc.SBAccountID</td>
                                    <td>@acc.CustID</td>
                                    <td>Rs @acc.Balance.ToString("N2")</td>
                                    <td>@(acc.CreatedOn.HasValue ? acc.CreatedOn.Value.ToString("dd-MMM-yyyy") : "")</td>
                                    <td>
                                        <a href="@Url.Action("DepositWithdraw", "Home", new { AccountID = acc.SBAccountID })" class="btn btn-sm btn-outline-primary">Deposit/Withdraw</a>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="6" class="text-muted">No accounts found.</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div id="noResults" class="alert alert-info mt-3" style="display:none;">
                No accounts found matching your search.
            </div>
            
            <!-- Pagination -->
            @if (totalPages > 1)
            {
                <div class="d-flex justify-content-between align-items-center mt-3">
                    <div>
                        <span class="text-muted">Showing @((currentPage - 1) * pageSize + 1) to @Math.Min(currentPage * pageSize, totalCount) of @totalCount entries</span>
                    </div>
                    <nav aria-label="Page navigation">
                        <ul class="pagination pagination-sm mb-0">
                            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                <a class="page-link" href="@pageLink(1)" aria-label="First">
                                    <span aria-hidden="true">&laquo;</span>
                                </a>
                            </li>
                            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                <a class="page-link" href="@pageLink(currentPage - 1)" aria-label="Previous">
                                    <span aria-hidden="true">&lsaquo;</span>
                                </a>
                            </li>
                            
                            @{
                                // Display a range of page numbers around the current page
                                int range = 2; // Show 2 pages before and after current page
                                int start = Math.Max(1, currentPage - range);
                                int end = Math.Min(totalPages, currentPage + range);
                                
                                // Always show first page
                                if (start > 1)
                                {
                                    <li class="page-item"><a class="page-link" href="@pageLink(1)">1</a></li>
                                    if (start > 2) { <li class="page-item disabled"><span class="page-link">...</span></li> }
                                }
                                
                                // Show the range of pages
                                for (int i = start; i <= end; i++)
                                {
                                    <li class="page-item @(i == currentPage ? "active" : "")">
                                        <a class="page-link" href="@pageLink(i)">@i</a>
                                    </li>
                                }
                                
                                // Always show last page
                                if (end < totalPages)
                                {
                                    if (end < totalPages - 1) { <li class="page-item disabled"><span class="page-link">...</span></li> }
                                    <li class="page-item"><a class="page-link" href="@pageLink(totalPages)">@totalPages</a></li>
                                }
                            }
                            
                            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                <a class="page-link" href="@pageLink(currentPage + 1)" aria-label="Next">
                                    <span aria-hidden="true">&rsaquo;</span>
                                </a>
                            </li>
                            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                <a class="page-link" href="@pageLink(totalPages)" aria-label="Last">
                                    <span aria-hidden="true">&raquo;</span>
                                </a>
                            </li>
                        </ul>
                    </nav>
                </div>
            }
        </div>
    </div>
</div>

<script>
(function() {
    var searchBox = document.getElementById('searchBox');
    var table = document.getElementById('accountsTable');
    var tbody = table.getElementsByTagName('tbody')[0];
    var rows = tbody.getElementsByTagName('tr');
    var totalCount = document.getElementById('totalCount');
    var noResults = document.getElementById('noResults');
    var pageSizeSelect = document.getElementById('pageSizeSelect');

    searchBox.addEventListener('keyup', function() {
        var searchTerm = this.value.toLowerCase().trim();
        var visibleCount = 0;

        for (var i = 0; i < rows.length; i++) {
            var row = rows[i];
            var cells = row.getElementsByTagName('td');
            
            if (cells.length < 5) {
                continue;
            }

            var found = false;

            for (var j = 1; j <= 4; j++) {
                if (cells[j]) {
                    var cellText = cells[j].textContent || cells[j].innerText;
                    cellText = cellText.replace(/\s+/g, ' ').trim().toLowerCase();
                    
                    if (cellText.indexOf(searchTerm) > -1) {
                        found = true;
                        break;
                    }
                }
            }

            if (found || searchTerm === '') {
                row.style.display = '';
                visibleCount++;
            } else {
                row.style.display = 'none';
            }
        }

        totalCount.textContent = visibleCount;

        if (visibleCount === 0 && searchTerm !== '') {
            noResults.style.display = 'block';
        } else {
            noResults.style.display = 'none';
        }
    });
    
    // Handle page size changes
    if (pageSizeSelect) {
        pageSizeSelect.addEventListener('change', function() {
            var pageSize = this.value;
            var url = '@Url.Action("ViewSavingsAccounts", new { page = 1, sort = currentSort, dir = currentDir })' + '&pageSize=' + pageSize;
            window.location.href = url;
        });
    }
})();
</script>