using System;
using System.Web;
using System.Web.Mvc;

namespace BigBank.Filters
{
    // Usage: [SessionAuthorize(RolesCsv = "Customer,Manager")]
    public class SessionAuthorizeAttribute : AuthorizeAttribute
    {
        public string RolesCsv { get; set; }
        private static readonly TimeSpan IdleTimeout = TimeSpan.FromMinutes(20); // session idle timeout safeguard

        protected override bool AuthorizeCore(HttpContextBase httpContext)
        {
            if (httpContext == null) return false;
            var session = httpContext.Session;
            if (session == null) return false;

            var userType = session["UserType"] as string;
            if (string.IsNullOrEmpty(userType)) return false;

            // Optional: bind session to client and idle timeout to reduce hijacking risk
            try
            {
                var now = DateTime.UtcNow;
                var last = session["LastActivityUtc"] as DateTime?;
                if (last.HasValue && now - last.Value > IdleTimeout)
                {
                    session.Clear();
                    return false;
                }

                var agent = httpContext.Request.UserAgent ?? string.Empty;
                var ip = httpContext.Request.UserHostAddress ?? string.Empty;
                var sessAgent = session["UserAgent"] as string ?? string.Empty;
                var sessIp = session["IP"] as string ?? string.Empty;
                if (!string.IsNullOrEmpty(sessAgent) && !string.Equals(sessAgent, agent, StringComparison.Ordinal))
                {
                    session.Clear();
                    return false;
                }
                if (!string.IsNullOrEmpty(sessIp) && !string.Equals(sessIp, ip, StringComparison.Ordinal))
                {
                    session.Clear();
                    return false;
                }

                // slide last activity
                session["LastActivityUtc"] = now;
            }
            catch { /* ignore best-effort */ }

            if (string.IsNullOrEmpty(RolesCsv)) return true; // any logged in user

            var allowed = RolesCsv.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
            foreach (var r in allowed)
            {
                if (string.Equals(r.Trim(), userType, StringComparison.OrdinalIgnoreCase))
                    return true;
            }
            return false;
        }

        protected override void HandleUnauthorizedRequest(AuthorizationContext filterContext)
        {
            // Redirect to login page for unauthorized or not logged in users
            filterContext.Result = new RedirectResult("/Home/Login");
        }
    }
}
