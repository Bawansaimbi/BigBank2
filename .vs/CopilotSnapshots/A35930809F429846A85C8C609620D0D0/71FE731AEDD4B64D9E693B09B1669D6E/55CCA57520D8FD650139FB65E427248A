using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Web.Mvc;
using BigBank.Models;
using BigBank.Filters;

namespace BigBank.Controllers
{
    [SessionAuthorize(RolesCsv = "Manager")]
    [NoCache]
    public class ManagerController : Controller
    {
        public ActionResult ManagerHome()
        {
            if (Session["UserType"] == null || Session["UserType"].ToString() != "Manager")
                return RedirectToAction("Login", "Account");

            var vm = new BigBank.Models.ManagerDashboardViewModel();
            using (var db = new BigBankEntities())
            {
                vm.Customers = db.Customers.OrderBy(c => c.CustName).ToList();
                vm.Employees = db.Employees.OrderBy(e => e.EmpName).ToList();

                vm.RecentTransactions = db.SavingsTransactions.OrderByDescending(t => t.TransactionDate).Take(50).Select(t => new BigBank.Models.TransactionItem {
                    Id = t.TransactionID.ToString(),
                    AccountId = t.SBAccountID,
                    Date = t.TransactionDate,
                    Source = "Savings",
                    Type = t.TransactionType,
                    Amount = t.Amount,
                    Remarks = t.Remarks
                }).ToList();

                vm.TotalCustomers = db.Customers.Count();
                vm.TotalEmployees = db.Employees.Count();
                vm.SavingsCount = db.SavingsAccounts.Count();
                vm.FDCount = db.FDAccounts.Count();
                vm.LoanCount = db.LoanAccounts.Count();
                vm.TotalAccounts = vm.SavingsCount + vm.FDCount + vm.LoanCount;

                var activeLoans = db.LoanAccounts.Where(l => l.Status == "Active").ToList();
                vm.ActiveLoansCount = 0;
                vm.PendingLoanAmount = 0m;
                foreach (var loan in activeLoans)
                {
                    var latestTxn = db.LoanTransactions
                        .Where(t => t.LoanAccountID == loan.LoanAccountID)
                        .OrderByDescending(t => t.EMIDate)
                        .FirstOrDefault();
                    decimal outstanding = latestTxn?.Outstanding ?? loan.TotalPayable ?? loan.LoanAmount;
                    if (outstanding > 0)
                    {
                        vm.ActiveLoansCount++;
                        vm.PendingLoanAmount += outstanding;
                    }
                }

                var since24 = DateTime.Now.AddDays(-1);
                var recentSavings = db.SavingsTransactions.Count(t => t.TransactionDate >= since24);
                var recentFD = db.FDTransactions.Count(t => t.TransactionDate >= since24);
                var recentLoan = db.LoanTransactions.Count(t => t.EMIDate >= since24);
                vm.RecentTransactionsCount = recentSavings + recentFD + recentLoan;
            }

            return View("~/Views/Home/ManagerHome.cshtml", vm);
        }

        public ActionResult ViewCustomers(string sort = "CreatedOn", string dir = "desc")
        {
            var customers = new List<Customer>();
            using (var db = new BigBankEntities())
            {
                IQueryable<Customer> q = db.Customers;
                bool ascending = string.Equals(dir, "asc", StringComparison.OrdinalIgnoreCase);
                switch (sort)
                {
                    case "CustID":
                        q = ascending ? q.OrderBy(c => c.CustID) : q.OrderByDescending(c => c.CustID);
                        break;
                    case "CustName":
                        q = ascending ? q.OrderBy(c => c.CustName) : q.OrderByDescending(c => c.CustName);
                        break;
                    case "PAN":
                        q = ascending ? q.OrderBy(c => c.PAN) : q.OrderByDescending(c => c.PAN);
                        break;
                    case "CreatedOn":
                    default:
                        q = ascending ? q.OrderBy(c => c.CreatedOn) : q.OrderByDescending(c => c.CreatedOn);
                        break;
                }
                customers = q.ToList();
            }
            ViewBag.SortColumn = sort;
            ViewBag.SortDir = dir;
            return View("~/Views/Home/ViewCustomers.cshtml", customers);
        }

        public ActionResult ViewEmployees(string sort = "EmpName", string dir = "asc")
        {
            var employees = new List<Employee>();
            using (var db = new BigBankEntities())
            {
                IQueryable<Employee> q = db.Employees.Include("Department");
                bool ascending = string.Equals(dir, "asc", StringComparison.OrdinalIgnoreCase);

                if (string.Equals(sort, "Department", StringComparison.OrdinalIgnoreCase))
                {
                    employees = q.ToList();
                    Func<Employee, string> displayDept = e =>
                    {
                        if (!string.IsNullOrEmpty(e.EmpType) && e.EmpType.Trim().ToUpper() == "M") return "Manager";
                        var did = (e.DeptID ?? "").Trim().ToUpper();
                        switch (did)
                        {
                            case "SB": return "Savings";
                            case "LN": return "Loan";
                            case "FD": return "Fixed Deposits";
                            default: return e.Department != null ? e.Department.DeptName : (e.DeptID ?? string.Empty);
                        }
                    };
                    employees = ascending ? employees.OrderBy(displayDept).ThenBy(e => e.EmpName).ToList()
                                          : employees.OrderByDescending(displayDept).ThenBy(e => e.EmpName).ToList();
                }
                else
                {
                    switch (sort)
                    {
                        case "EmpID":
                            q = ascending ? q.OrderBy(e => e.EmpID) : q.OrderByDescending(e => e.EmpID);
                            break;
                        case "DeptID":
                            q = ascending ? q.OrderBy(e => e.DeptID) : q.OrderByDescending(e => e.DeptID);
                            break;
                        case "EmpName":
                        default:
                            q = ascending ? q.OrderBy(e => e.EmpName) : q.OrderByDescending(e => e.EmpName);
                            break;
                    }
                    employees = q.ToList();
                }
            }
            ViewBag.SortColumn = sort;
            ViewBag.SortDir = dir;
            return View("~/Views/Home/ViewEmployees.cshtml", employees);
        }

        public ActionResult ManageCustomers()
        {
            return View("~/Views/Home/ManageCustomers.cshtml");
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddCustomer(string CustName, DateTime? DOB, string PAN, string Gender, string Address, string PhoneNum)
        {
            var home = new HomeController();
            home.ControllerContext = this.ControllerContext;
            return home.AddCustomer(CustName, DOB, PAN, Gender, Address, PhoneNum);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult RemoveCustomer(string CustID)
        {
            var home = new HomeController();
            home.ControllerContext = this.ControllerContext;
            return home.RemoveCustomer(CustID);
        }

        public ActionResult ManageEmployees()
        {
            using (var db = new BigBankEntities())
            {
                ViewBag.Departments = db.Departments.OrderBy(d => d.DeptName).ToList();
            }
            return View("~/Views/Home/ManageEmployees.cshtml");
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddEmployee(string EmpName, string Gender, string PAN, string PhoneNum, string Address, string DeptID, string EmpType)
        {
            var home = new HomeController();
            home.ControllerContext = this.ControllerContext;
            return home.AddEmployee(EmpName, Gender, PAN, PhoneNum, Address, DeptID, EmpType);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult RemoveEmployee(string EmpID)
        {
            var home = new HomeController();
            home.ControllerContext = this.ControllerContext;
            return home.RemoveEmployee(EmpID);
        }

        public ActionResult ManageAccounts()
        {
            var vm = new BigBank.Models.ManagerDashboardViewModel();
            using (var db = new BigBankEntities())
            {
                vm.SavingsCount = db.SavingsAccounts.Count();
                vm.FDCount = db.FDAccounts.Count();
                vm.LoanCount = db.LoanAccounts.Count();
                vm.TotalAccounts = vm.SavingsCount + vm.FDCount + vm.LoanCount;
            }
            return View("~/Views/Home/ManageAccounts.cshtml", vm);
        }

        public ActionResult ViewSavingsAccounts()
        {
            using (var db = new BigBankEntities())
            {
                var list = db.SavingsAccounts.OrderBy(s => s.SBAccountID).ToList();
                return View("~/Views/Home/ViewSavingsAccounts.cshtml", list);
            }
        }

        public ActionResult ViewFDAccounts()
        {
            using (var db = new BigBankEntities())
            {
                var list = db.FDAccounts.OrderBy(f => f.FDAccountID).ToList();
                return View("~/Views/Home/ViewFDAccounts.cshtml", list);
            }
        }

        public ActionResult ViewLoanAccounts()
        {
            using (var db = new BigBankEntities())
            {
                var list = db.LoanAccounts.OrderBy(l => l.LoanAccountID).ToList();
                return View("~/Views/Home/ViewLoanAccounts.cshtml", list);
            }
        }

        public ActionResult OpenSavingsAccount()
        {
            return View("~/Views/Home/OpenSavingsAccount.cshtml");
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult OpenSavingsAccount(string CustID, decimal? InitialDeposit)
        {
            if (string.IsNullOrWhiteSpace(CustID) || !InitialDeposit.HasValue)
            {
                TempData["Error"] = "Customer ID and initial deposit are required.";
                return View("~/Views/Home/OpenSavingsAccount.cshtml");
            }

            if (InitialDeposit.Value < 1000m)
            {
                TempData["Error"] = "Minimum opening balance is 1000.";
                ViewBag.LastCustID = CustID;
                ViewBag.LastDeposit = InitialDeposit;
                return View("~/Views/Home/OpenSavingsAccount.cshtml");
            }

            string newId = null;
            using (var db = new BigBankEntities())
            {
                var cust = db.Customers.FirstOrDefault(c => c.CustID == CustID);
                if (cust == null)
                {
                    TempData["Error"] = "Customer not found.";
                    ViewBag.LastCustID = CustID;
                    ViewBag.LastDeposit = InitialDeposit;
                    return View("~/Views/Home/OpenSavingsAccount.cshtml");
                }

                if (db.SavingsAccounts.Any(s => s.CustID == CustID))
                {
                    TempData["Error"] = "Customer already has a savings account.";
                    ViewBag.LastCustID = CustID;
                    ViewBag.LastDeposit = InitialDeposit;
                    return View("~/Views/Home/OpenSavingsAccount.cshtml");
                }

                using (var tx = db.Database.BeginTransaction())
                {
                    try
                    {
                        var sql = "INSERT INTO SavingsAccount (CustID, Balance, CreatedOn) OUTPUT INSERTED.SBAccountID VALUES (@cust, @bal, @created)";
                        newId = db.Database.SqlQuery<string>(sql,
                            new SqlParameter("@cust", SqlDbType.VarChar) { Value = CustID },
                            new SqlParameter("@bal", SqlDbType.Decimal) { Value = InitialDeposit.Value },
                            new SqlParameter("@created", SqlDbType.DateTime) { Value = DateTime.Now }
                        ).FirstOrDefault();

                        db.Database.ExecuteSqlCommand(
                            "INSERT INTO SavingsTransaction (SBAccountID, TransactionDate, TransactionType, Amount, Remarks) VALUES (@p0,@p1,@p2,@p3,@p4)",
                            newId, DateTime.Now, "D", InitialDeposit.Value, "Opening deposit by manager");

                        tx.Commit();
                        TempData["Success"] = "Savings account opened: " + newId;
                    }
                    catch (Exception ex)
                    {
                        tx.Rollback();
                        TempData["Error"] = "Failed to open account: " + ex.Message;
                        ViewBag.LastCustID = CustID;
                        ViewBag.LastDeposit = InitialDeposit;
                        return View("~/Views/Home/OpenSavingsAccount.cshtml");
                    }
                }
            }

            ViewBag.NewAccountId = newId;
            ViewBag.LastCustID = CustID;
            ViewBag.LastDeposit = InitialDeposit;
            return View("~/Views/Home/OpenSavingsAccount.cshtml");
        }

        public ActionResult LookupCustomerName(string id)
        {
            var home = new HomeController();
            home.ControllerContext = this.ControllerContext;
            return home.LookupCustomerName(id);
        }

        public ActionResult OpenFDAccount()
        {
            return View("~/Views/Home/OpenFDAccount.cshtml");
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult OpenFDAccount(string CustID, decimal? Amount, int? Tenure, DateTime? StartDate)
        {
            var home = new HomeController();
            home.ControllerContext = this.ControllerContext;
            return home.OpenFDAccount(CustID, Amount, Tenure, StartDate);
        }

        public ActionResult ViewTransactions(string sort = "Date", string dir = "desc", int? hours = null)
        {
            var home = new HomeController();
            home.ControllerContext = this.ControllerContext;
            return home.ViewTransactions(sort, dir, hours);
        }
    }
}
