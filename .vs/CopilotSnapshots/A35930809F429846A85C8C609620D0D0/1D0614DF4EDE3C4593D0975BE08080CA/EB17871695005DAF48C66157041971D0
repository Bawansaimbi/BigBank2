using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Web.Mvc;
using BigBank.Models;
using BigBank.Filters;

namespace BigBank.Controllers
{
    [SessionAuthorize(RolesCsv = "Employee")]
    [NoCache]
    public class EmployeeController : Controller
    {
        // General Employee Home (for employees not in specific departments)
        public ActionResult Index()
        {
            if (Session["UserType"] == null || Session["UserType"].ToString() != "Employee")
                return RedirectToAction("Login", "Home");

            return View();
        }

        // Department-specific Employee Dashboards
        public ActionResult SavingsEmployeeHome()
        {
            if (Session["UserType"] == null || Session["UserType"].ToString() != "Employee")
                return RedirectToAction("Login", "Home");

            var vm = new ManagerDashboardViewModel();
            using (var db = new BigBankEntities())
            {
                vm.TotalCustomers = db.Customers.Count();
                vm.SavingsCount = db.SavingsAccounts.Count();
                
                // Recent transactions count (last 24 hours)
                var since24 = DateTime.Now.AddDays(-1);
                vm.RecentTransactionsCount = db.SavingsTransactions.Count(t => t.TransactionDate >= since24);
            }
            return View(vm);
        }

        public ActionResult FDEmployeeHome()
        {
            if (Session["UserType"] == null || Session["UserType"].ToString() != "Employee")
                return RedirectToAction("Login", "Home");

            var vm = new ManagerDashboardViewModel();
            using (var db = new BigBankEntities())
            {
                vm.TotalCustomers = db.Customers.Count();
                vm.FDCount = db.FDAccounts.Count();
                
                // Recent transactions count (last 24 hours)
                var since24 = DateTime.Now.AddDays(-1);
                vm.RecentTransactionsCount = db.FDTransactions.Count(t => t.TransactionDate >= since24);
            }
            return View(vm);
        }

        public ActionResult LoanEmployeeHome()
        {
            if (Session["UserType"] == null || Session["UserType"].ToString() != "Employee")
                return RedirectToAction("Login", "Home");

            var vm = new ManagerDashboardViewModel();
            using (var db = new BigBankEntities())
            {
                vm.TotalCustomers = db.Customers.Count();
                vm.LoanCount = db.LoanAccounts.Count();
                
                // Calculate active loans and pending amount
                var activeLoans = db.LoanAccounts.Where(l => l.Status == "Active").ToList();
                vm.ActiveLoansCount = 0;
                vm.PendingLoanAmount = 0m;
                
                foreach (var loan in activeLoans)
                {
                    var latestTxn = db.LoanTransactions
                        .Where(t => t.LoanAccountID == loan.LoanAccountID)
                        .OrderByDescending(t => t.EMIDate)
                        .FirstOrDefault();
                    
                    decimal outstanding = latestTxn?.Outstanding ?? loan.TotalPayable ?? loan.LoanAmount;
                    
                    if (outstanding > 0)
                    {
                        vm.ActiveLoansCount++;
                        vm.PendingLoanAmount += outstanding;
                    }
                }
                
                // Recent transactions count (last 24 hours)
                var since24 = DateTime.Now.AddDays(-1);
                vm.RecentTransactionsCount = db.LoanTransactions.Count(t => t.EMIDate >= since24);
            }
            return View(vm);
        }

        // Employee Views for Customers
        public ActionResult ViewCustomers(string sort = "CreatedOn", string dir = "desc")
        {
            var customers = new List<Customer>();
            using (var db = new BigBankEntities())
            {
                IQueryable<Customer> q = db.Customers;
                // apply sorting
                bool ascending = string.Equals(dir, "asc", StringComparison.OrdinalIgnoreCase);
                switch (sort)
                {
                    case "CustID":
                        q = ascending ? q.OrderBy(c => c.CustID) : q.OrderByDescending(c => c.CustID);
                        break;
                    case "CustName":
                        q = ascending ? q.OrderBy(c => c.CustName) : q.OrderByDescending(c => c.CustName);
                        break;
                    case "PAN":
                        q = ascending ? q.OrderBy(c => c.PAN) : q.OrderByDescending(c => c.PAN);
                        break;
                    case "CreatedOn":
                    default:
                        q = ascending ? q.OrderBy(c => c.CreatedOn) : q.OrderByDescending(c => c.CreatedOn);
                        break;
                }

                customers = q.ToList();
            }

            ViewBag.SortColumn = sort;
            ViewBag.SortDir = dir;
            return View(customers);
        }

        // Employee Views for Accounts
        public ActionResult ViewSavingsAccounts(int page = 1, int pageSize = 20, string sort = "SBAccountID", string dir = "asc")
        {
            using (var db = new BigBankEntities())
            {
                var query = db.SavingsAccounts.AsQueryable();
                
                // Apply sorting
                bool ascending = string.Equals(dir, "asc", StringComparison.OrdinalIgnoreCase);
                switch (sort)
                {
                    case "SBAccountID":
                        query = ascending ? query.OrderBy(a => a.SBAccountID) : query.OrderByDescending(a => a.SBAccountID);
                        break;
                    case "CustID":
                        query = ascending ? query.OrderBy(a => a.CustID) : query.OrderByDescending(a => a.CustID);
                        break;
                    case "Balance":
                        query = ascending ? query.OrderBy(a => a.Balance) : query.OrderByDescending(a => a.Balance);
                        break;
                    case "CreatedOn":
                        query = ascending ? query.OrderBy(a => a.CreatedOn) : query.OrderByDescending(a => a.CreatedOn);
                        break;
                    default:
                        query = ascending ? query.OrderBy(a => a.SBAccountID) : query.OrderByDescending(a => a.SBAccountID);
                        break;
                }
                
                // Calculate pagination
                int totalCount = query.Count();
                int totalPages = (int)Math.Ceiling((double)totalCount / pageSize);
                
                // Adjust page if out of range
                if (page < 1) page = 1;
                if (page > totalPages && totalPages > 0) page = totalPages;
                
                var accounts = query
                    .Skip((page - 1) * pageSize)
                    .Take(pageSize)
                    .ToList();
                
                // Pass pagination information to the view
                ViewBag.Page = page;
                ViewBag.PageSize = pageSize;
                ViewBag.TotalPages = totalPages;
                ViewBag.TotalCount = totalCount;
                ViewBag.SortColumn = sort;
                ViewBag.SortDir = dir;
                
                return View(accounts);
            }
        }

        public ActionResult ViewFDAccounts()
        {
            using (var db = new BigBankEntities())
            {
                var list = db.FDAccounts.OrderBy(f => f.FDAccountID).ToList();
                return View(list);
            }
        }

        public ActionResult ViewLoanAccounts()
        {
            using (var db = new BigBankEntities())
            {
                var list = db.LoanAccounts.OrderBy(l => l.LoanAccountID).ToList();
                return View(list);
            }
        }

        // Employee Views for Transactions
        public ActionResult ViewSavingsTransactions(int page = 1, int pageSize = 20, string sort = "TransactionDate", string dir = "desc")
        {
            using (var db = new BigBankEntities())
            {
                var query = db.SavingsTransactions.AsQueryable();
                
                // Apply sorting
                bool ascending = string.Equals(dir, "asc", StringComparison.OrdinalIgnoreCase);
                switch (sort)
                {
                    case "TransactionID":
                        query = ascending ? query.OrderBy(t => t.TransactionID) : query.OrderByDescending(t => t.TransactionID);
                        break;
                    case "SBAccountID":
                        query = ascending ? query.OrderBy(t => t.SBAccountID) : query.OrderByDescending(t => t.SBAccountID);
                        break;
                    case "TransactionType":
                        query = ascending ? query.OrderBy(t => t.TransactionType) : query.OrderByDescending(t => t.TransactionType);
                        break;
                    case "Amount":
                        query = ascending ? query.OrderBy(t => t.Amount) : query.OrderByDescending(t => t.Amount);
                        break;
                    case "TransactionDate":
                    default:
                        query = ascending ? query.OrderBy(t => t.TransactionDate) : query.OrderByDescending(t => t.TransactionDate);
                        break;
                }
                
                // Calculate pagination
                int totalCount = query.Count();
                int totalPages = (int)Math.Ceiling((double)totalCount / pageSize);
                
                // Adjust page if out of range
                if (page < 1) page = 1;
                if (page > totalPages) page = totalPages;
                
                var transactions = query
                    .Skip((page - 1) * pageSize)
                    .Take(pageSize)
                    .ToList();
                
                // Pass pagination information to the view
                ViewBag.Page = page;
                ViewBag.PageSize = pageSize;
                ViewBag.TotalPages = totalPages;
                ViewBag.TotalCount = totalCount;
                ViewBag.SortColumn = sort;
                ViewBag.SortDir = dir;
                
                return View(transactions);
            }
        }

        public ActionResult ViewFDTransactions()
        {
            using (var db = new BigBankEntities())
            {
                var transactions = db.FDTransactions
                    .OrderByDescending(t => t.TransactionDate)
                    .Take(100) // Limit for performance
                    .ToList();
                return View(transactions);
            }
        }

        public ActionResult ViewLoanTransactions()
        {
            using (var db = new BigBankEntities())
            {
                var transactions = db.LoanTransactions
                    .OrderByDescending(t => t.EMIDate)
                    .Take(100) // Limit for performance
                    .ToList();
                return View(transactions);
            }
        }

        // Employee Account Opening Functions
        public ActionResult OpenSavingsAccount()
        {
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult OpenSavingsAccount(string CustID, decimal? InitialDeposit)
        {
            if (string.IsNullOrWhiteSpace(CustID) || !InitialDeposit.HasValue)
            {
                TempData["Error"] = "Customer ID and initial deposit are required.";
                return View();
            }

            if (InitialDeposit.Value < 1000m)
            {
                TempData["Error"] = "Minimum opening balance is 1000.";
                ViewBag.LastCustID = CustID;
                ViewBag.LastDeposit = InitialDeposit;
                return View();
            }

            string newId = null;
            using (var db = new BigBankEntities())
            {
                var cust = db.Customers.FirstOrDefault(c => c.CustID == CustID);
                if (cust == null)
                {
                    TempData["Error"] = "Customer not found.";
                    ViewBag.LastCustID = CustID;
                    ViewBag.LastDeposit = InitialDeposit;
                    return View();
                }

                // ensure customer doesn't already have a savings account
                if (db.SavingsAccounts.Any(s => s.CustID == CustID))
                {
                    TempData["Error"] = "Customer already has a savings account.";
                    ViewBag.LastCustID = CustID;
                    ViewBag.LastDeposit = InitialDeposit;
                    return View();
                }

                // create account and transaction
                using (var tx = db.Database.BeginTransaction())
                {
                    try
                    {
                        var sql = "INSERT INTO SavingsAccount (CustID, Balance, CreatedOn) OUTPUT INSERTED.SBAccountID VALUES (@cust, @bal, @created)";
                        newId = db.Database.SqlQuery<string>(sql, 
                            new SqlParameter("@cust", SqlDbType.VarChar) { Value = CustID }, 
                            new SqlParameter("@bal", SqlDbType.Decimal) { Value = InitialDeposit.Value }, 
                            new SqlParameter("@created", SqlDbType.DateTime) { Value = DateTime.Now }).FirstOrDefault();

                        db.Database.ExecuteSqlCommand("INSERT INTO SavingsTransaction (SBAccountID, TransactionDate, TransactionType, Amount, Remarks) VALUES (@p0,@p1,@p2,@p3,@p4)", 
                            newId, DateTime.Now, "D", InitialDeposit.Value, "Opening deposit by employee");

                        tx.Commit();
                        TempData["Success"] = "Savings account opened: " + newId;
                    }
                    catch (Exception ex)
                    {
                        tx.Rollback();
                        TempData["Error"] = "Failed to open account: " + ex.Message;
                        ViewBag.LastCustID = CustID;
                        ViewBag.LastDeposit = InitialDeposit;
                        return View();
                    }
                }
            }

            ViewBag.NewAccountId = newId;
            ViewBag.LastCustID = CustID;
            ViewBag.LastDeposit = InitialDeposit;
            return View();
        }

        public ActionResult OpenFDAccount()
        {
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult OpenFDAccount(string CustID, decimal? Amount, int? Tenure, DateTime? StartDate)
        {
            var errors = new List<string>();
            if (string.IsNullOrWhiteSpace(CustID)) errors.Add("Customer ID is required.");
            if (!Amount.HasValue) errors.Add("FD amount is required.");
            if (!Tenure.HasValue) errors.Add("Tenure is required.");
            if (!StartDate.HasValue) errors.Add("Start date is required.");

            if (errors.Any())
            {
                TempData["Error"] = string.Join("<br/>", errors);
                ViewBag.LastCustID = CustID;
                return View();
            }

            if (Amount.Value < 10000m)
            {
                TempData["Error"] = "Minimum FD amount is Rs 10,000.";
                ViewBag.LastCustID = CustID;
                return View();
            }

            string newFDId = null;
            decimal maturityAmount = 0;
            decimal rate = 0;
            DateTime endDate = DateTime.MinValue;

            using (var db = new BigBankEntities())
            {
                var cust = db.Customers.FirstOrDefault(c => c.CustID == CustID);
                if (cust == null)
                {
                    TempData["Error"] = "Customer not found.";
                    ViewBag.LastCustID = CustID;
                    return View();
                }

                var sb = db.SavingsAccounts.FirstOrDefault(s => s.CustID == CustID);
                if (sb == null)
                {
                    TempData["Error"] = "Customer must have a savings account to open FD.";
                    ViewBag.LastCustID = CustID;
                    return View();
                }

                if (sb.Balance < Amount.Value)
                {
                    TempData["Error"] = $"Insufficient savings balance. Available: Rs {sb.Balance:N2}";
                    ViewBag.LastCustID = CustID;
                    return View();
                }

                if (sb.Balance - Amount.Value < 1000m)
                {
                    TempData["Error"] = "Cannot open FD: Savings account must maintain minimum Rs 1,000 balance.";
                    ViewBag.LastCustID = CustID;
                    return View();
                }

                // Calculate interest rate based on tenure and senior citizen status
                var age = (int)((DateTime.Today - cust.DOB).TotalDays / 365.25);
                bool isSenior = age >= 60;

                decimal baseRate = Tenure.Value <= 1 ? 6.0m : (Tenure.Value == 2 ? 7.0m : 8.0m);
                if (isSenior) baseRate += 0.5m;
                rate = baseRate;

                var start = StartDate.Value;
                endDate = start.AddYears(Tenure.Value);
                maturityAmount = Amount.Value * (decimal)Math.Pow((double)(1 + rate / 100m), Tenure.Value);

                try
                {
                    using (var tx = db.Database.BeginTransaction())
                    {
                        // Deduct from savings
                        var newBal = sb.Balance - Amount.Value;
                        db.Database.ExecuteSqlCommand("UPDATE SavingsAccount SET Balance = @p0 WHERE SBAccountID = @p1", newBal, sb.SBAccountID);

                        // Insert FD account
                        var sql = @"INSERT INTO FDAccount (CustomerID, StartDate, EndDate, Amount, InterestRate, MaturityAmount, Tenure, Status)
                                    OUTPUT INSERTED.FDAccountID
                                    VALUES (@cust, @start, @end, @amt, @rate, @maturity, @tenure, @status)";
                        
                        newFDId = db.Database.SqlQuery<string>(sql,
                            new SqlParameter("@cust", SqlDbType.VarChar) { Value = CustID },
                            new SqlParameter("@start", SqlDbType.Date) { Value = start },
                            new SqlParameter("@end", SqlDbType.Date) { Value = endDate },
                            new SqlParameter("@amt", SqlDbType.Decimal) { Value = Amount.Value },
                            new SqlParameter("@rate", SqlDbType.Decimal) { Value = rate },
                            new SqlParameter("@maturity", SqlDbType.Decimal) { Value = maturityAmount },
                            new SqlParameter("@tenure", SqlDbType.Int) { Value = Tenure.Value },
                            new SqlParameter("@status", SqlDbType.NVarChar) { Value = "Active" }
                        ).FirstOrDefault();

                        // Insert FD transaction
                        var processedBy = Session["UserID"] != null ? Session["UserID"].ToString() : null;
                        db.Database.ExecuteSqlCommand(
                            "INSERT INTO FDTransaction (FDAccountID, TransactionDate, TransactionType, Amount, InterestRate, MaturityAmount, ProcessedBy, Remarks) VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7)",
                            newFDId, DateTime.Now, "Open", Amount.Value, rate, maturityAmount, (object)processedBy ?? DBNull.Value, "FD opened by employee");

                        tx.Commit();
                        TempData["Success"] = $"FD account {newFDId} created successfully!";
                    }
                }
                catch (Exception ex)
                {
                    TempData["Error"] = "Failed to create FD account: " + ex.Message;
                    ViewBag.LastCustID = CustID;
                    return View();
                }
            }

            ViewBag.NewFDId = newFDId;
            ViewBag.CustomerName = CustID;
            ViewBag.Amount = Amount.Value.ToString("N2");
            ViewBag.Tenure = Tenure.Value;
            ViewBag.Rate = rate.ToString("N1");
            ViewBag.MaturityAmount = maturityAmount.ToString("N2");
            ViewBag.EndDate = endDate.ToString("dd-MMM-yyyy");
            ViewBag.LastCustID = CustID;
            return View();
        }

        // Helper method for customer lookup in FD opening
        public ActionResult LookupCustomerForFD(string id)
        {
            if (string.IsNullOrWhiteSpace(id))
                return Json(new { name = "" }, JsonRequestBehavior.AllowGet);

            using (var db = new BigBankEntities())
            {
                var cust = db.Customers.FirstOrDefault(c => c.CustID == id);
                if (cust == null)
                    return Json(new { name = "" }, JsonRequestBehavior.AllowGet);

                var savings = db.SavingsAccounts.FirstOrDefault(s => s.CustID == id);
                var age = (int)((DateTime.Today - cust.DOB).TotalDays / 365.25);

                return Json(new
                {
                    name = cust.CustName,
                    hasSavings = savings != null,
                    savingsAccountId = savings?.SBAccountID ?? "",
                    savingsBalance = savings?.Balance ?? 0,
                    isSenior = age >= 60
                }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteSavingsAccount(string accountId)
        {
            if (string.IsNullOrWhiteSpace(accountId))
            {
                TempData["Error"] = "Account ID is required.";
                return RedirectToAction("ViewSavingsAccounts");
            }
            
            using (var db = new BigBankEntities())
            {
                var account = db.SavingsAccounts.FirstOrDefault(a => a.SBAccountID == accountId);
                if (account == null)
                {
                    TempData["Error"] = "Account not found.";
                    return RedirectToAction("ViewSavingsAccounts");
                }
                
                // Check if account has transactions
                var hasTransactions = db.SavingsTransactions.Any(t => t.SBAccountID == accountId);
                if (hasTransactions)
                {
                    TempData["Error"] = "Cannot delete account with transactions. Please contact the IT department to proceed.";
                    return RedirectToAction("ViewSavingsAccounts");
                }
                
                try
                {
                    db.SavingsAccounts.Remove(account);
                    db.SaveChanges();
                    TempData["Success"] = $"Account {accountId} has been deleted successfully.";
                }
                catch (Exception ex)
                {
                    TempData["Error"] = "Failed to delete account: " + ex.Message;
                }
            }
            
            return RedirectToAction("ViewSavingsAccounts");
        }
    }
}