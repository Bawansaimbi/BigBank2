using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Web;
using System.Web.Mvc;
using BigBank.Models;
using BigBank.Filters;

namespace BigBank.Controllers
{
    public class HomeController : Controller
    {
        [AllowAnonymous]
        public ActionResult Index()
        {
            return RedirectToAction("Login", "Account");
        }

        [AllowAnonymous]
        public ActionResult Contact()
        {
            ViewBag.Message = "Your contact page.";

            return View();
        }

        // GET: Login
        [AllowAnonymous]
        public ActionResult Login()
        {
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        [AllowAnonymous]
        public ActionResult Login(string username, string password, string userType)
        {
            if (string.IsNullOrWhiteSpace(username) || string.IsNullOrWhiteSpace(password) || string.IsNullOrWhiteSpace(userType))
            {
                ModelState.AddModelError("", "Please provide username, password and user type.");
                return View();
            }

            var hashed = HashPassword(password);

            using (var db = new BigBankEntities())
            {
                if (userType == "Customer")
                {
                    var cust = db.Customers.FirstOrDefault(c => c.Username == username);
                    if (cust != null && cust.Password != null && cust.Password.SequenceEqual(hashed))
                    {
                        Session["UserType"] = "Customer";
                        Session["UserID"] = cust.CustID;
                        Session["Username"] = cust.Username;
                        // bind session to UA and IP for extra safety
                        Session["UserAgent"] = Request.UserAgent ?? string.Empty;
                        Session["IP"] = Request.UserHostAddress ?? string.Empty;
                        Session["LastActivityUtc"] = DateTime.UtcNow;
                        return RedirectToAction("CustomerHome");
                    }
                }
                else
                {
                    var emp = db.Employees.FirstOrDefault(e => e.Username == username);
                    if (emp != null && emp.Password != null && emp.Password.SequenceEqual(hashed))
                    {
                        if ((userType == "Employee" && emp.EmpType == "E") || (userType == "Manager" && emp.EmpType == "M"))
                        {
                            Session["UserType"] = emp.EmpType == "M" ? "Manager" : "Employee";
                            Session["UserID"] = emp.EmpID;
                            Session["Username"] = emp.Username;
                            Session["DeptID"] = emp.DeptID;
                            Session["UserAgent"] = Request.UserAgent ?? string.Empty;
                            Session["IP"] = Request.UserHostAddress ?? string.Empty;
                            Session["LastActivityUtc"] = DateTime.UtcNow;
                            
                            if (emp.EmpType == "M")
                                return RedirectToAction("ManagerHome");
                            

                            // Route employees to Employee controller based on department
                            var deptId = (emp.DeptID ?? "").Trim().ToUpper();
                            switch (deptId)
                            {
                                case "SB":
                                case "DEPT01":
                                    return RedirectToAction("SavingsEmployeeHome", "Employee");
                                case "FD":
                                    return RedirectToAction("FDEmployeeHome", "Employee");
                                case "LN":
                                    return RedirectToAction("LoanEmployeeHome", "Employee");
                                default:
                                    return RedirectToAction("Index", "Employee");
                            }
                        }
                    }
                }
            }

            ModelState.AddModelError("", "Invalid username, password or user type.");
            return View();
        }

        // GET: Register
        [AllowAnonymous]
        public ActionResult Register()
        {
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        [AllowAnonymous]
        public ActionResult Register(RegisterViewModel model)
        {
            if (!ModelState.IsValid)
                return View(model);

            // Additional server-side validations to match manager AddCustomer
            if (!System.Text.RegularExpressions.Regex.IsMatch(model.CustName ?? string.Empty, "^[A-Za-z ]+$$"))
            {
                ModelState.AddModelError("CustName", "Name must contain letters and spaces only.");
            }

            var minDob = DateTime.Today.AddYears(-18);
            if (model.DOB > minDob)
            {
                ModelState.AddModelError("DOB", "You must be at least 18 years old to register.");
            }

            var pan = (model.PAN ?? string.Empty).Trim().ToUpper();
            if (!System.Text.RegularExpressions.Regex.IsMatch(pan, "^[A-Z]{4}[0-9]{4}$"))
            {
                ModelState.AddModelError("PAN", "PAN must be in format ABCD1234 (4 letters followed by 4 digits).");
            }

            var phone = System.Text.RegularExpressions.Regex.Replace(model.PhoneNum ?? string.Empty, "\\s+", "");
            if (!System.Text.RegularExpressions.Regex.IsMatch(phone, "^[0-9]{10}$"))
            {
                ModelState.AddModelError("PhoneNum", "Phone number must be exactly 10 digits.");
            }

            using (var db = new BigBankEntities())
            {
                // unique username across customers and employees
                if (db.Customers.Any(c => c.Username == model.Username) || db.Employees.Any(e => e.Username == model.Username))
                {
                    ModelState.AddModelError("Username", "Username already exists. Please choose a different username.");
                }

                // PAN must not exist in employees
                if (db.Employees.Any(e => e.PAN == pan))
                {
                    ModelState.AddModelError("PAN", "PAN belongs to an employee or manager. Employees and managers cannot register as customers.");
                }

                // PAN must not exist in customers
                if (db.Customers.Any(c => c.PAN == pan))
                {
                    ModelState.AddModelError("PAN", "A customer with this PAN already exists.");
                }

                // Phone must be unique among customers
                if (db.Customers.Any(c => c.PhoneNum == phone))
                {
                    ModelState.AddModelError("PhoneNum", "Phone number is already registered.");
                }

                if (!ModelState.IsValid)
                {
                    // return view with validation messages
                    return View(model);
                }

                var sql = @"INSERT INTO Customer (CustName, Gender, DOB, PAN, PhoneNum, Address, Username, Password, CreatedOn)
                            VALUES (@name, @gender, @dob, @pan, @phone, @addr, @username, @pwd, @created)";

                var pwd = HashPassword(model.Password);

                var parameters = new[] {
                    // sizes/types aligned with EDMX / DB schema
                    new SqlParameter("@name", SqlDbType.NVarChar, 50) { Value = (object)model.CustName ?? DBNull.Value },
                    new SqlParameter("@gender", SqlDbType.Char, 1) { Value = (object)model.Gender ?? DBNull.Value },
                    new SqlParameter("@dob", SqlDbType.Date) { Value = model.DOB },
                    // PAN is CHAR(8) in database
                    new SqlParameter("@pan", SqlDbType.Char, 8) { Value = (object)pan ?? DBNull.Value },
                    new SqlParameter("@phone", SqlDbType.NVarChar, 15) { Value = (object)phone ?? DBNull.Value },
                    new SqlParameter("@addr", SqlDbType.NVarChar, 100) { Value = (object)model.Address ?? DBNull.Value },
                    new SqlParameter("@username", SqlDbType.NVarChar, 50) { Value = (object)model.Username ?? DBNull.Value },
                    // Password column is varbinary(64) in EDMX
                    new SqlParameter("@pwd", SqlDbType.VarBinary, 64) { Value = (object)pwd ?? DBNull.Value },
                    new SqlParameter("@created", SqlDbType.DateTime) { Value = DateTime.Now }
                };

                db.Database.ExecuteSqlCommand(sql, parameters);
            }

            TempData["Message"] = "Registration successful. You can now login.";
            return RedirectToAction("Login");
        }

        public ActionResult Logout()
        {
            Session.Clear();
            return RedirectToAction("Login");
        }

        // GET: Settings
        public ActionResult Settings()
        {
            if (Session["UserType"] == null) return RedirectToAction("Login");
            return View();
        }

        public ActionResult CustomerHome()
        {
            if (Session["UserType"] == null || Session["UserType"].ToString() != "Customer")
                return RedirectToAction("Login");

            string custId = Session["UserID"].ToString();
            var vm = new CustomerDashboardViewModel();

            using (var db = new BigBankEntities())
            {
                var customer = db.Customers.FirstOrDefault(c => c.CustID == custId);
                ViewBag.Customer = customer;

                var sb = db.SavingsAccounts.FirstOrDefault(s => s.CustID == custId);
                if (sb != null)
                {
                    vm.SavingsAccountID = sb.SBAccountID;
                    vm.SavingsBalance = sb.Balance;
                }

                vm.FDAccountIDs = db.FDAccounts.Where(f => f.CustomerID == custId).Select(f => f.FDAccountID).ToList();
                vm.LoanAccountIDs = db.LoanAccounts.Where(l => l.CustomerID == custId).Select(l => l.LoanAccountID).ToList();

                vm.TotalBalance = (vm.SavingsBalance ?? 0) + db.FDAccounts.Where(f => f.CustomerID == custId).Sum(f => (decimal?)f.Amount) ?? 0 + db.LoanAccounts.Where(l => l.CustomerID == custId).Sum(l => (decimal?)0) ?? 0;
            }

            return View(vm);
        }

        // Manager Home
        [SessionAuthorize(RolesCsv = "Manager")]
        [NoCache]
        public ActionResult ManagerHome()
        {
            if (Session["UserType"] == null || Session["UserType"].ToString() != "Manager")
                return RedirectToAction("Login");

            var vm = new BigBank.Models.ManagerDashboardViewModel();
            using (var db = new BigBankEntities())
            {
                vm.Customers = db.Customers.OrderBy(c => c.CustName).ToList();
                vm.Employees = db.Employees.OrderBy(e => e.EmpName).ToList();

                // collect recent savings transactions as a sample
                vm.RecentTransactions = db.SavingsTransactions.OrderByDescending(t => t.TransactionDate).Take(50).Select(t => new BigBank.Models.TransactionItem {
                    Id = t.TransactionID.ToString(),
                    AccountId = t.SBAccountID,
                    Date = t.TransactionDate,
                    Source = "Savings",
                    Type = t.TransactionType,
                    Amount = t.Amount,
                    Remarks = t.Remarks
                }).ToList();

                // summary stats
                vm.TotalCustomers = db.Customers.Count();
                vm.TotalEmployees = db.Employees.Count();
                vm.SavingsCount = db.SavingsAccounts.Count();
                vm.FDCount = db.FDAccounts.Count();
                vm.LoanCount = db.LoanAccounts.Count();
                vm.TotalAccounts = vm.SavingsCount + vm.FDCount + vm.LoanCount;

                // Active loans and Pending Loan Amount calculation
                // Get all loan accounts with Status = 'Active'
                var activeLoans = db.LoanAccounts.Where(l => l.Status == "Active").ToList();
                
                vm.ActiveLoansCount = 0;
                vm.PendingLoanAmount = 0m;
                
                foreach (var loan in activeLoans)
                {
                    // Get the latest transaction for this loan
                    var latestTxn = db.LoanTransactions
                        .Where(t => t.LoanAccountID == loan.LoanAccountID)
                        .OrderByDescending(t => t.EMIDate)
                        .FirstOrDefault();
                    
                    // Calculate outstanding amount
                    decimal outstanding = latestTxn?.Outstanding ?? loan.TotalPayable ?? loan.LoanAmount;
                    
                    // If outstanding > 0, count it as active and add to pending amount
                    if (outstanding > 0)
                    {
                        vm.ActiveLoansCount++;
                        vm.PendingLoanAmount += outstanding;
                    }
                }

               
                var since = DateTime.Now.AddDays(-7);
                var activeCustsFromSavings = db.SavingsTransactions.Where(t => t.TransactionDate >= since).Select(t => t.SBAccountID).ToList();
                // better approach: count distinct customers who had any transaction in last 7 days
                var activeCustomerIds = db.SavingsTransactions.Where(t => t.TransactionDate >= since).Select(t => t.SBAccountID).ToList();
                // approximate by distinct customers from account tables
                var activeFromSavingsCust = (from s in db.SavingsTransactions where s.TransactionDate >= since join acc in db.SavingsAccounts on s.SBAccountID equals acc.SBAccountID select acc.CustID).Distinct().Count();
                var activeFromFD = (from t in db.FDTransactions where t.TransactionDate >= since join f in db.FDAccounts on t.FDAccountID equals f.FDAccountID select f.CustomerID).Distinct().Count();
                var activeFromLoan = (from t in db.LoanTransactions where t.EMIDate >= since join l in db.LoanAccounts on t.LoanAccountID equals l.LoanAccountID select l.CustomerID).Distinct().Count();
                vm.ActiveUsers = activeFromSavingsCust + activeFromFD + activeFromLoan;

                // recent transactions: last 24 hours across savings, fd and loan
                var since24 = DateTime.Now.AddDays(-1);
                var recentSavings = db.SavingsTransactions.Count(t => t.TransactionDate >= since24);
                var recentFD = db.FDTransactions.Count(t => t.TransactionDate >= since24);
                var recentLoan = db.LoanTransactions.Count(t => t.EMIDate >= since24);
                vm.RecentTransactionsCount = recentSavings + recentFD + recentLoan;

                // also fill RecentTransactions list with up to 50 recent across savings for display
                vm.RecentTransactions = db.SavingsTransactions.Where(t => t.TransactionDate >= since24).OrderByDescending(t => t.TransactionDate).Take(50).Select(t => new BigBank.Models.TransactionItem {
                    Id = t.TransactionID.ToString(),
                    AccountId = t.SBAccountID,
                    Date = t.TransactionDate,
                    Source = "Savings",
                    Type = t.TransactionType,
                    Amount = t.Amount,
                    Remarks = t.Remarks
                }).ToList();
            }

            return View(vm);
        }

        [SessionAuthorize(RolesCsv = "Manager")]
        [NoCache]
        public ActionResult ViewCustomers(string sort = "CreatedOn", string dir = "desc")
        {
            var customers = new List<Customer>();
            using (var db = new BigBankEntities())
            {
                IQueryable<Customer> q = db.Customers;
                // apply sorting
                bool ascending = string.Equals(dir, "asc", StringComparison.OrdinalIgnoreCase);
                switch (sort)
                {
                    case "CustID":
                        q = ascending ? q.OrderBy(c => c.CustID) : q.OrderByDescending(c => c.CustID);
                        break;
                    case "CustName":
                        q = ascending ? q.OrderBy(c => c.CustName) : q.OrderByDescending(c => c.CustName);
                        break;
                    case "PAN":
                        q = ascending ? q.OrderBy(c => c.PAN) : q.OrderByDescending(c => c.PAN);
                        break;
                    case "CreatedOn":
                    default:
                        q = ascending ? q.OrderBy(c => c.CreatedOn) : q.OrderByDescending(c => c.CreatedOn);
                        break;
                }

                customers = q.ToList();
            }

            ViewBag.SortColumn = sort;
            ViewBag.SortDir = dir;
            return View(customers);
        }

        [SessionAuthorize(RolesCsv = "Manager")]
        [NoCache]
        public ActionResult ViewEmployees(string sort = "EmpName", string dir = "asc")
        {
            var employees = new List<Employee>();
            using (var db = new BigBankEntities())
            {
                IQueryable<Employee> q = db.Employees.Include("Department");
                bool ascending = string.Equals(dir, "asc", StringComparison.OrdinalIgnoreCase);

                // if sorting by Department (friendly name), fetch then sort in-memory
                if (string.Equals(sort, "Department", StringComparison.OrdinalIgnoreCase))
                {
                    employees = q.ToList();
                    Func<Employee, string> displayDept = e =>
                    {
                        if (!string.IsNullOrEmpty(e.EmpType) && e.EmpType.Trim().ToUpper() == "M") return "Manager";
                        var did = (e.DeptID ?? "").Trim().ToUpper();
                        switch (did)
                        {
                            case "SB": return "Savings";
                            case "LN": return "Loan";
                            case "FD": return "Fixed Deposits";
                            default: return e.Department != null ? e.Department.DeptName : (e.DeptID ?? string.Empty);
                        }
                    };

                    employees = ascending ? employees.OrderBy(displayDept).ThenBy(e => e.EmpName).ToList()
                                          : employees.OrderByDescending(displayDept).ThenBy(e => e.EmpName).ToList();
                }
                else
                {
                    switch (sort)
                    {
                        case "EmpID":
                            q = ascending ? q.OrderBy(e => e.EmpID) : q.OrderByDescending(e => e.EmpID);
                            break;
                        case "DeptID":
                            q = ascending ? q.OrderBy(e => e.DeptID) : q.OrderByDescending(e => e.DeptID);
                            break;
                        case "EmpName":
                        default:
                            q = ascending ? q.OrderBy(e => e.EmpName) : q.OrderByDescending(e => e.EmpName);
                            break;
                    }

                    employees = q.ToList();
                }
            }

            ViewBag.SortColumn = sort;
            ViewBag.SortDir = dir;
            return View(employees);
        }

        // Open FD
        public ActionResult OpenFD()
        {
            if (Session["UserType"] == null || Session["UserType"].ToString() != "Customer")
                return RedirectToAction("Login");

            var vm = new OpenFDViewModel();
            string custId = Session["UserID"].ToString();
            using (var db = new BigBankEntities())
            {
                var cust = db.Customers.FirstOrDefault(c => c.CustID == custId);
                if (cust != null)
                {
                    vm.CustomerDOB = cust.DOB;
                }
            }
            vm.StartDate = DateTime.Today;
            return View(vm);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult OpenFD(OpenFDViewModel model)
        {
            if (!ModelState.IsValid)
                return View(model);

            if (model.Amount < 10000m)
            {
                ModelState.AddModelError("Amount", "Minimum FD amount is 10000.");
                return View(model);
            }

            // compute end date and interest rate server-side to avoid tampering
            string custId = Session["UserID"].ToString();
            DateTime dob = DateTime.MinValue;
            using (var db = new BigBankEntities())
            {
                var cust = db.Customers.FirstOrDefault(c => c.CustID == custId);
                if (cust != null) dob = cust.DOB;

                // calculate senior flag
                bool isSenior = false;
                if (dob != DateTime.MinValue)
                {
                    var age = (int)((DateTime.Today - dob).TotalDays / 365.25);
                    isSenior = age >= 60;
                }

                // determine base interest rate by tenure
                decimal baseRate;
                if (model.Tenure <= 1) baseRate = 6.0m;
                else if (model.Tenure == 2) baseRate = 7.0m;
                else baseRate = 8.0m;

                if (isSenior) baseRate += 0.5m;

                model.InterestRate = baseRate;
                // ensure StartDate is set
                var start = model.StartDate == default(DateTime) ? DateTime.Today : model.StartDate;
                var end = start.AddYears(model.Tenure);
                model.EndDate = end;

                // check customer's savings balance
                var sb = db.SavingsAccounts.FirstOrDefault(s => s.CustID == custId);
                if (sb == null)
                {
                    ModelState.AddModelError("", "Savings account not found.");
                    model.CustomerDOB = cust != null ? (DateTime?)cust.DOB : null;
                    return View(model);
                }

                if (sb.Balance < model.Amount || sb.Balance - model.Amount < 1000m)
                {
                    // insufficient funds
                    TempData["Error"] = "Bank balance insufficient, please deposit.";
                    model.CustomerDOB = cust != null ? (DateTime?)cust.DOB : null;
                    return View(model);
                }

                // compute maturity amount (simple interest) and persist within transaction
                var maturityAmount = model.Amount + (model.Amount * (model.InterestRate / 100m) * model.Tenure);

                using (var tx = db.Database.BeginTransaction())
                {
                    try
                    {
                        // deduct from savings
                        var newBal = sb.Balance - model.Amount;
                        db.Database.ExecuteSqlCommand("UPDATE SavingsAccount SET Balance = @p0 WHERE SBAccountID = @p1", newBal, sb.SBAccountID);

                        var insertSql = @"INSERT INTO FDAccount (CustomerID, StartDate, EndDate, Amount, InterestRate, MaturityAmount, Tenure, Status)
                                          OUTPUT INSERTED.FDAccountID
                                          VALUES (@cust, @start, @end, @amt, @irate, @maturity, @tenure, @status)";
                        var insertParams = new[] {
                            new SqlParameter("@cust", SqlDbType.VarChar) { Value = custId },
                            new SqlParameter("@start", SqlDbType.Date) { Value = start },
                            new SqlParameter("@end", SqlDbType.Date) { Value = end },
                            new SqlParameter("@amt", SqlDbType.Decimal) { Value = model.Amount },
                            new SqlParameter("@irate", SqlDbType.Decimal) { Value = model.InterestRate },
                            new SqlParameter("@maturity", SqlDbType.Decimal) { Value = maturityAmount },
                            new SqlParameter("@tenure", SqlDbType.Int) { Value = model.Tenure },
                            new SqlParameter("@status", SqlDbType.NVarChar) { Value = "Active" }
                        };

                        var newFdId = db.Database.SqlQuery<string>(insertSql, insertParams).FirstOrDefault();

                        // insert a FDTransaction record for this opening
                        var processedBy = Session["Username"] != null ? Session["Username"].ToString() : null;
                        var txnSql = @"INSERT INTO FDTransaction (FDAccountID, TransactionDate, TransactionType, Amount, InterestRate, MaturityAmount, ProcessedBy, Remarks)
                                       VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @6, @7)";
                        db.Database.ExecuteSqlCommand(txnSql, newFdId, DateTime.Now, "Open", model.Amount, model.InterestRate, maturityAmount, (object)processedBy ?? DBNull.Value, "FD opened via web");

                        tx.Commit();
                    }
                    catch
                    {
                        tx.Rollback();
                        throw;
                    }
                }

                // read latest FD record for customer to show success details
                var fdrec = db.FDAccounts.Where(f => f.CustomerID == custId).OrderByDescending(f => f.FDAuto).FirstOrDefault();
                if (fdrec != null)
                {
                    TempData["FDSuccess"] = $"FD opened: {fdrec.FDAccountID}. Maturity Amount: Rs {fdrec.MaturityAmount.GetValueOrDefault():N2}. End Date: {fdrec.EndDate:yyyy-MM-dd}";
                }
            }

            return RedirectToAction("CustomerHome");
        }

        // Open Loan
        public ActionResult OpenLoan()
        {
            if (Session["UserType"] == null || Session["UserType"].ToString() != "Customer")
                return RedirectToAction("Login");

            return View(new OpenLoanViewModel());
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult OpenLoan(OpenLoanViewModel model)
        {
            if (!ModelState.IsValid)
                return View(model);

            if (model.LoanAmount < 10000m)
            {
                ModelState.AddModelError("LoanAmount", "Minimum Loan amount is 10000.");
                return View(model);
            }

            string custId = Session["UserID"].ToString();
            using (var db = new BigBankEntities())
            {
                var cust = db.Customers.FirstOrDefault(c => c.CustID == custId);
                if (cust != null)
                {
                }

                // senior citizen check via DOB
                var age = (int)((DateTime.Today - cust.DOB).TotalDays / 365.25);
                bool isSenior = age >= 60;
                if (isSenior && model.LoanAmount > 100000m)
                {
                    ModelState.AddModelError("LoanAmount", "Senior Citizens cannot be sanctioned a loan greater than Rs. 1,00,000.");
                    return View(model);
                }

                // interest rate by amount with senior override
                decimal interestRate = isSenior ? 9.5m : (model.LoanAmount <= 500000m ? 10.0m : (model.LoanAmount <= 1000000m ? 9.5m : 9.0m));

                // compute EMI and totals
                int months = model.Tenure * 12;
                decimal monthlyRate = (interestRate / 100m) / 12m;
                decimal emi;
                if (monthlyRate > 0)
                {
                    double factor = Math.Pow(1 + (double)monthlyRate, months);
                    emi = model.LoanAmount * monthlyRate * (decimal)factor / ((decimal)factor - 1);
                }
                else
                {
                    emi = months > 0 ? model.LoanAmount / months : 0m;
                }
                emi = Math.Round(emi, 2);
                var totalPayable = emi * months;
                var endDate = model.StartDate.AddYears(model.Tenure);

                try
                {
                    using (var tx = db.Database.BeginTransaction())
                    {
                        var insertSql = @"INSERT INTO LoanAccount (CustomerID, StartDate, EndDate, LoanAmount, InterestRate, Tenure, TotalPayable, Status)
                                           OUTPUT INSERTED.LoanAccountID
                                           VALUES (@custId, @startDate, @endDate, @loanAmount, @interestRate, @tenure, @totalPayable, @status)";

                        var newLoanId = db.Database.SqlQuery<string>(insertSql,
                            new SqlParameter("@custId", custId),
                            new SqlParameter("@startDate", model.StartDate),
                            new SqlParameter("@endDate", endDate),
                            new SqlParameter("@loanAmount", model.LoanAmount),
                            new SqlParameter("@interestRate", interestRate),
                            new SqlParameter("@tenure", months),
                            new SqlParameter("@totalPayable", totalPayable),
                            new SqlParameter("@status", "Active")
                        ).FirstOrDefault();

                        // Initial loan transaction with Outstanding
                        var processedBy = Session["UserID"] != null ? Session["UserID"].ToString() : null;
                        db.Database.ExecuteSqlCommand(
                            "INSERT INTO LoanTransaction (LoanAccountID, EMIDate, Amount, Outstanding, ProcessedBy, Remarks) VALUES (@p0, @p1, @p2, @p3, @p4, @p5)",
                            newLoanId, DateTime.Now, 0, totalPayable, (object)processedBy ?? DBNull.Value, "Loan account opened");

                        tx.Commit();

                        TempData["Success"] = $"Loan account opened successfully!<br/>Account Number: {newLoanId}<br/>EMI Amount: Rs. {emi:N2}<br/>Interest Rate: {interestRate}%<br/>Total Payable: Rs. {totalPayable:N2}";
                    }
                }
                catch (Exception ex)
                {
                    ModelState.AddModelError("", "Failed to create loan account: " + ex.Message);
                    return View(model);
                }
            }

            return RedirectToAction("CustomerHome");
        }

        [SessionAuthorize(RolesCsv = "Manager")]
        [NoCache]
        public ActionResult ManageCustomers()
        {
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        [SessionAuthorize(RolesCsv = "Manager")]
        [NoCache]
        public ActionResult AddCustomer(string CustName, DateTime? DOB, string PAN, string Gender, string Address, string PhoneNum)
        {
            var errors = new List<string>();

            // basic required checks
            if (string.IsNullOrWhiteSpace(CustName)) errors.Add("Name is required.");
            if (!DOB.HasValue) errors.Add("Date of birth is required.");
            if (string.IsNullOrWhiteSpace(PAN)) errors.Add("PAN is required.");
            if (string.IsNullOrWhiteSpace(Gender)) errors.Add("Gender is required.");
            if (string.IsNullOrWhiteSpace(Address)) errors.Add("Address is required.");
            if (string.IsNullOrWhiteSpace(PhoneNum)) errors.Add("Phone number is required.");

            // further validations only if present
            if (!string.IsNullOrWhiteSpace(CustName))
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(CustName, "^[A-Za-z ]+$"))
                    errors.Add("Name must contain letters and spaces only.");
            }

            if (DOB.HasValue)
            {
                var minDob = DateTime.Today.AddYears(-18);
                if (DOB.Value > minDob)
                    errors.Add("Customer must be at least 18 years old.");
            }

            if (!string.IsNullOrWhiteSpace(PAN))
            {
                var pan = PAN.Trim().ToUpper();
                // accept 4 letters followed by 4 digits (e.g. ABCD1234)
                if (!System.Text.RegularExpressions.Regex.IsMatch(pan, "^[A-Z]{4}[0-9]{4}$"))
                    errors.Add("PAN must be in format ABCD1234 (4 letters followed by 4 digits).");
            }

            if (!string.IsNullOrWhiteSpace(PhoneNum))
            {
                var phone = System.Text.RegularExpressions.Regex.Replace(PhoneNum, "\\s+", "");
                if (!System.Text.RegularExpressions.Regex.IsMatch(phone, "^[0-9]{10}$"))
                    errors.Add("Phone number must be exactly 10 digits.");
            }

            // normalize phone for uniqueness check
            var phoneNorm = string.IsNullOrWhiteSpace(PhoneNum) ? string.Empty : System.Text.RegularExpressions.Regex.Replace(PhoneNum, "\\s+", "");

            using (var db = new BigBankEntities())
            {
                if (!string.IsNullOrWhiteSpace(PAN))
                {
                    var panUpper = PAN.Trim().ToUpper();
                    if (db.Customers.Any(c => c.PAN == panUpper))
                        errors.Add("A customer with this PAN already exists.");
                }

                if (!string.IsNullOrWhiteSpace(phoneNorm))
                {
                    if (db.Customers.Any(c => c.PhoneNum == phoneNorm))
                        errors.Add("Phone number is already registered to another customer.");
                }
            }

            if (errors.Any())
            {
                // show all errors
                TempData["Error"] = string.Join("<br/>", errors);
                return RedirectToAction("ManageCustomers");
            }

            // generate username and password as requested
            var baseUsername = CustName.Replace(" ", "") + "123";
            var username = baseUsername;
            var passwordPlain = PAN.Trim().ToUpper() + DOB.Value.Year.ToString();
            var pwdHash = HashPassword(passwordPlain);

            string newCustId = null;
            using (var db = new BigBankEntities())
            {
                // ensure username uniqueness
                int suffix = 1;
                while (db.Customers.Any(c => c.Username == username))
                {
                    username = baseUsername + suffix.ToString();
                    suffix++;
                }

                var sql = @"INSERT INTO Customer (CustName, Gender, DOB, PAN, PhoneNum, Address, Username, Password, CreatedOn)
                            OUTPUT INSERTED.CustID
                            VALUES (@name, @gender, @dob, @pan, @phone, @addr, @username, @pwd, @created)";

                var parameters = new[] {
                    new SqlParameter("@name", System.Data.SqlDbType.NVarChar, 50) { Value = (object)CustName ?? DBNull.Value },
                    new SqlParameter("@gender", System.Data.SqlDbType.Char, 1) { Value = (object)Gender ?? DBNull.Value },
                    new SqlParameter("@dob", System.Data.SqlDbType.Date) { Value = DOB.Value.Date },
                    new SqlParameter("@pan", System.Data.SqlDbType.Char, 8) { Value = (object)PAN.Trim().ToUpper() ?? DBNull.Value },
                    new SqlParameter("@phone", System.Data.SqlDbType.NVarChar, 15) { Value = (object)phoneNorm ?? DBNull.Value },
                    new SqlParameter("@addr", System.Data.SqlDbType.NVarChar, 100) { Value = (object)Address ?? DBNull.Value },
                    new SqlParameter("@username", System.Data.SqlDbType.NVarChar, 50) { Value = (object)username ?? DBNull.Value },
                    new SqlParameter("@pwd", System.Data.SqlDbType.VarBinary, 64) { Value = (object)pwdHash ?? DBNull.Value },
                    new SqlParameter("@created", System.Data.SqlDbType.DateTime) { Value = DateTime.Now }
                };

                try
                {
                    newCustId = db.Database.SqlQuery<string>(sql, parameters).FirstOrDefault();
                }
                catch (Exception ex)
                {
                    TempData["Error"] = "Failed to add customer: " + ex.Message;
                    return RedirectToAction("ManageCustomers");
                }
            }

            TempData["Success"] = "Customer added successfully.";
            TempData["NewCustomerInfo"] = $"CustID: {newCustId}, Username: {username}, Password: {passwordPlain}";
            return RedirectToAction("ManageCustomers");
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        [SessionAuthorize(RolesCsv = "Manager")]
        [NoCache]
        public ActionResult RemoveCustomer(string CustID)
        {
            if (string.IsNullOrWhiteSpace(CustID))
            {
                TempData["Error"] = "Please provide Customer ID to remove.";
                return RedirectToAction("ManageCustomers");
            }

            using (var db = new BigBankEntities())
            {
                var cust = db.Customers.FirstOrDefault(c => c.CustID == CustID);
                if (cust == null)
                {
                    TempData["Error"] = "Customer not found.";
                    return RedirectToAction("ManageCustomers");
                }

                // check for any active accounts
                bool hasSavings = db.SavingsAccounts.Any(s => s.CustID == CustID);
                bool hasFD = db.FDAccounts.Any(f => f.CustomerID == CustID);
                bool hasLoan = db.LoanAccounts.Any(l => l.CustomerID == CustID);

                if (hasSavings || hasFD || hasLoan)
                {
                    TempData["Error"] = "Cannot remove customer: active accounts exist. Close all accounts before deleting the customer.";
                    return RedirectToAction("ManageCustomers");
                }

                try
                {
                    db.Database.ExecuteSqlCommand("DELETE FROM Customer WHERE CustID = @p0", CustID);
                }
                catch (Exception ex)
                {
                    TempData["Error"] = "Failed to remove customer: " + ex.Message;
                    return RedirectToAction("ManageCustomers");
                }
            }

            TempData["Success"] = "Customer removed successfully.";
            return RedirectToAction("ManageCustomers");
        }

        [SessionAuthorize(RolesCsv = "Manager")]
        [NoCache]
        public ActionResult ManageEmployees()
        {
            using (var db = new BigBankEntities())
            {
                ViewBag.Departments = db.Departments.OrderBy(d => d.DeptName).ToList();
            }
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        [SessionAuthorize(RolesCsv = "Manager")]
        [NoCache]
        public ActionResult AddEmployee(string EmpName, string Gender, string PAN, string PhoneNum, string Address, string DeptID, string EmpType)
        {
            var errors = new List<string>();
            if (string.IsNullOrWhiteSpace(EmpName)) errors.Add("Name is required.");
            if (string.IsNullOrWhiteSpace(Gender)) errors.Add("Gender is required.");
            if (string.IsNullOrWhiteSpace(PAN)) errors.Add("PAN is required.");
            if (string.IsNullOrWhiteSpace(PhoneNum)) errors.Add("Phone number is required.");
            if (string.IsNullOrWhiteSpace(Address)) errors.Add("Address is required.");
            if (string.IsNullOrWhiteSpace(DeptID)) errors.Add("Department is required.");
            if (string.IsNullOrWhiteSpace(EmpType)) errors.Add("Employee type is required.");

            if (!string.IsNullOrWhiteSpace(EmpName))
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(EmpName, "^[A-Za-z ]+$"))
                    errors.Add("Name must contain letters and spaces only.");
            }

            if (!string.IsNullOrWhiteSpace(PAN))
            {
                var pan = PAN.Trim().ToUpper();
                if (!System.Text.RegularExpressions.Regex.IsMatch(pan, "^[A-Z]{4}[0-9]{4}$"))
                    errors.Add("PAN must be in format ABCD1234 (4 letters followed by 4 digits).");
            }

            var phoneNorm = string.IsNullOrWhiteSpace(PhoneNum) ? string.Empty : System.Text.RegularExpressions.Regex.Replace(PhoneNum, "\\s+", "");
            if (!string.IsNullOrWhiteSpace(phoneNorm))
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(phoneNorm, "^[0-9]{10}$"))
                    errors.Add("Phone number must be exactly 10 digits.");
            }

            using (var db = new BigBankEntities())
            {
                var panUpper = (PAN ?? string.Empty).Trim().ToUpper();
                if (!string.IsNullOrWhiteSpace(panUpper))
                {
                    if (db.Employees.Any(e => e.PAN == panUpper) || db.Customers.Any(c => c.PAN == panUpper))
                        errors.Add("PAN already exists for another customer or employee.");
                }

                if (!string.IsNullOrWhiteSpace(phoneNorm))
                {
                    if (db.Employees.Any(e => e.PhoneNum == phoneNorm) || db.Customers.Any(c => c.PhoneNum == phoneNorm))
                        errors.Add("Phone number is already registered to another user.");
                }

                if (!db.Departments.Any(d => d.DeptID == DeptID))
                    errors.Add("Selected department does not exist.");

                if (errors.Any())
                {
                    TempData["Error"] = string.Join("<br/>", errors);
                    return RedirectToAction("ManageEmployees");
                }

                // Find the manager's EmpID (where EmpType = 'M')
                var manager = db.Employees.FirstOrDefault(e => e.EmpType == "M");
                string managerID = manager != null ? manager.EmpID : null;

                // generate username and password
                var baseUsername = EmpName.Replace(" ", "") + "123";
                var username = baseUsername;
                int suffix = 1;
                while (db.Employees.Any(e => e.Username == username) || db.Customers.Any(c => c.Username == username))
                {
                    username = baseUsername + suffix.ToString();
                    suffix++;
                }

                var passwordPlain = panUpper + phoneNorm; // PAN + Phone
                var pwdHash = HashPassword(passwordPlain);

                var sql = @"INSERT INTO Employee (EmpName, Gender, Username, Password, PAN, PhoneNum, Address, DeptID, EmpType, ManagerID)
                            OUTPUT INSERTED.EmpID
                            VALUES (@name, @gender, @username, @pwd, @pan, @phone, @addr, @dept, @emptype, @managerid)";

                var parameters = new[] {
                    new SqlParameter("@name", System.Data.SqlDbType.NVarChar, 50) { Value = (object)EmpName ?? DBNull.Value },
                    new SqlParameter("@gender", System.Data.SqlDbType.Char, 1) { Value = (object)Gender ?? DBNull.Value },
                    new SqlParameter("@username", System.Data.SqlDbType.NVarChar, 50) { Value = (object)username ?? DBNull.Value },
                    new SqlParameter("@pwd", System.Data.SqlDbType.VarBinary, 64) { Value = (object)pwdHash ?? DBNull.Value },
                    new SqlParameter("@pan", System.Data.SqlDbType.Char, 8) { Value = (object)panUpper ?? DBNull.Value },
                    new SqlParameter("@phone", System.Data.SqlDbType.NVarChar, 15) { Value = (object)phoneNorm ?? DBNull.Value },
                    new SqlParameter("@addr", System.Data.SqlDbType.NVarChar, 100) { Value = (object)Address ?? DBNull.Value },
                    new SqlParameter("@dept", System.Data.SqlDbType.Char, 6) { Value = (object)DeptID ?? DBNull.Value },
                    new SqlParameter("@emptype", System.Data.SqlDbType.Char, 1) { Value = (object)EmpType ?? DBNull.Value },
                    new SqlParameter("@managerid", System.Data.SqlDbType.Char, 7) { Value = (object)managerID ?? DBNull.Value }
                };

                string newEmpId = null;
                try
                {
                    newEmpId = db.Database.SqlQuery<string>(sql, parameters).FirstOrDefault();
                }
                catch (Exception ex)
                {
                    TempData["Error"] = "Failed to add employee: " + ex.Message;
                    return RedirectToAction("ManageEmployees");
                }

                TempData["Success"] = "Employee added successfully.";
                TempData["NewEmployeeInfo"] = $"EmpID: {newEmpId}, Username: {username}, Password: {passwordPlain}";
                return RedirectToAction("ManageEmployees");
            }
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        [SessionAuthorize(RolesCsv = "Manager")]
        [NoCache]
        public ActionResult RemoveEmployee(string EmpID)
        {
            if (string.IsNullOrWhiteSpace(EmpID))
            {
                TempData["Error"] = "Please provide Employee ID to remove.";
                return RedirectToAction("ManageEmployees");
            }

            using (var db = new BigBankEntities())
            {
                var emp = db.Employees.FirstOrDefault(e => e.EmpID == EmpID);
                if (emp == null)
                {
                    TempData["Error"] = "Employee not found.";
                    return RedirectToAction("ManageEmployees");
                }

                // check for related transactions that would block deletion
                bool hasFDTrans = db.FDTransactions.Any(t => t.ProcessedBy == emp.Username || t.ProcessedBy == emp.EmpID);
                bool hasLoanTrans = db.LoanTransactions.Any(t => t.ProcessedBy == emp.Username || t.ProcessedBy == emp.EmpID);
                if (hasFDTrans || hasLoanTrans)
                {
                    TempData["Error"] = "Cannot remove employee: related transactions exist. Reassign or remove transactions first.";
                    return RedirectToAction("ManageEmployees");
                }

                try
                {
                    db.Database.ExecuteSqlCommand("DELETE FROM Employee WHERE EmpID = @p0", EmpID);
                }
                catch (Exception ex)
                {
                    TempData["Error"] = "Failed to remove employee: " + ex.Message;
                    return RedirectToAction("ManageEmployees");
                }

                TempData["Success"] = "Employee removed successfully.";
                return RedirectToAction("ManageEmployees");
            }
        }

        [SessionAuthorize(RolesCsv = "Manager")]
        [NoCache]
        public ActionResult ViewTransactions(string sort = "Date", string dir = "desc", int? hours = null)
        {
            var list = new List<BigBank.Models.TransactionItem>();
            using (var db = new BigBankEntities())
            {
                DateTime? since = null;
                if (hours.HasValue && hours.Value > 0)
                {
                    since = DateTime.Now.AddHours(-hours.Value);
                }

              
                var svQuery = (from t in db.SavingsTransactions
                             join a in db.SavingsAccounts on t.SBAccountID equals a.SBAccountID
                             join c in db.Customers on a.CustID equals c.CustID
                             where !(t.Remarks != null && t.Remarks.Contains("Transfer"))
                             select new BigBank.Models.TransactionItem
                             {
                                 Id = "SB" + t.TransactionID.ToString(),
                                 AccountId = t.SBAccountID,
                                 Date = t.TransactionDate,
                                 Source = "Savings",
                                 Type = t.TransactionType,
                                 Amount = t.Amount,
                                 Remarks = t.Remarks,
                                 CustomerId = a.CustID,
                                 CustomerName = c.CustName,
                                 FromName = c.CustName,
                                 ToName = c.CustName
                             }).ToList();

                if (since.HasValue)
                {
                    svQuery = svQuery.Where(x => x.Date.HasValue && x.Date.Value >= since.Value).ToList();
                }

                var fdQuery = (from t in db.FDTransactions
                             join a in db.FDAccounts on t.FDAccountID equals a.FDAccountID
                             join c in db.Customers on a.CustomerID equals c.CustID
                             select new BigBank.Models.TransactionItem
                             {
                                 Id = "FD" + t.FDTransID.ToString(),
                                 AccountId = t.FDAccountID,
                                 Date = t.TransactionDate,
                                 Source = "FD",
                                 Type = t.TransactionType,
                                 Amount = t.Amount,
                                 Remarks = t.Remarks,
                                 CustomerId = a.CustomerID,
                                 CustomerName = c.CustName,
                                 FromName = c.CustName,
                                 ToName = "Bank"
                             }).ToList();

                if (since.HasValue)
                {
                    fdQuery = fdQuery.Where(x => x.Date.HasValue && x.Date.Value >= since.Value).ToList();
                }

                var lnQuery = (from t in db.LoanTransactions
                             join a in db.LoanAccounts on t.LoanAccountID equals a.LoanAccountID
                             join c in db.Customers on a.CustomerID equals c.CustID
                             select new BigBank.Models.TransactionItem
                             {
                                 Id = "LN" + t.TransactionID.ToString(),
                                 AccountId = t.LoanAccountID,
                                 Date = t.EMIDate,
                                 Source = "Loan",
                                 Type = "EMI",
                                 Amount = t.Amount,
                                 Remarks = t.Remarks,
                                 CustomerId = a.CustomerID,
                                 CustomerName = c.CustName,
                                 FromName = c.CustName,
                                 ToName = "Bank"
                             }).ToList();

                if (since.HasValue)
                {
                    lnQuery = lnQuery.Where(x => x.Date.HasValue && x.Date.Value >= since.Value).ToList();
                }

                // handle transfers between savings accounts by looking for remarks pattern 'Transfer to'
                var transfersQuery = db.SavingsTransactions.Where(t => t.Remarks != null && t.Remarks.Contains("Transfer to")).ToList();
                if (since.HasValue)
                {
                    transfersQuery = transfersQuery.Where(t => t.TransactionDate >= since.Value).ToList();
                }

                var transferItems = new List<BigBank.Models.TransactionItem>();
                foreach (var tr in transfersQuery)
                {
                    // attempt to parse partner account from remarks
                    string partner = null;
                    if (!string.IsNullOrEmpty(tr.Remarks))
                    {
                        var r = tr.Remarks;
                        var idx = r.IndexOf("to ", StringComparison.OrdinalIgnoreCase);
                        if (idx >= 0) partner = r.Substring(idx + 3).Trim();
                    }

                    var acc = db.SavingsAccounts.FirstOrDefault(a => a.SBAccountID == tr.SBAccountID);
                    var fromCust = acc != null ? db.Customers.FirstOrDefault(c => c.CustID == acc.CustID) : null;
                    string toName = partner;
                    if (!string.IsNullOrEmpty(partner))
                    {
                        var recAcc = db.SavingsAccounts.FirstOrDefault(a => a.SBAccountID == partner);
                        if (recAcc != null)
                        {
                            var recCust = db.Customers.FirstOrDefault(c => c.CustID == recAcc.CustID);
                            if (recCust != null) toName = recCust.CustName;
                        }
                    }

                    transferItems.Add(new BigBank.Models.TransactionItem
                    {
                        Id = "SB" + tr.TransactionID.ToString(),
                        AccountId = tr.SBAccountID,
                        Date = tr.TransactionDate,
                        Source = "Savings",
                        Type = "Transfer",
                        Amount = tr.Amount,
                        Remarks = tr.Remarks,
                        CustomerId = acc != null ? acc.CustID : null,
                        CustomerName = fromCust != null ? fromCust.CustName : null,
                        FromName = fromCust != null ? fromCust.CustName : null,
                        ToName = toName ?? ""
                    });
                }

                // union all lists in-memory
                list = svQuery.Concat(fdQuery).Concat(lnQuery).Concat(transferItems).ToList();

                // sorting
                bool asc = string.Equals(dir, "asc", StringComparison.OrdinalIgnoreCase);
                switch (sort)
                {
                    case "TransID":
                        list = asc ? list.OrderBy(x => x.Id).ToList() : list.OrderByDescending(x => x.Id).ToList();
                        break;
                    case "Type":
                        list = asc ? list.OrderBy(x => x.Source).ToList() : list.OrderByDescending(x => x.Source).ToList();
                        break;
                    case "CustomerID":
                        list = asc ? list.OrderBy(x => x.CustomerId).ToList() : list.OrderByDescending(x => x.CustomerId).ToList();
                        break;
                    case "Amount":
                        list = asc ? list.OrderBy(x => x.Amount).ToList() : list.OrderByDescending(x => x.Amount).ToList();
                        break;
                    case "Date":
                    default:
                        list = asc ? list.OrderBy(x => x.Date).ToList() : list.OrderByDescending(x => x.Date).ToList();
                        break;
                }
            }

            ViewBag.SortColumn = sort;
            ViewBag.SortDir = dir;
            ViewBag.Hours = hours;
            return View(list);
        }

        // GET: ChangePassword
        public ActionResult ChangePassword()
        {
            if (Session["UserType"] == null) return RedirectToAction("Login");
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult ChangePassword(string CurrentPassword, string NewPassword, string ConfirmPassword)
        {
            if (Session["UserType"] == null) return RedirectToAction("Login");

            if (string.IsNullOrWhiteSpace(CurrentPassword) || string.IsNullOrWhiteSpace(NewPassword) || string.IsNullOrWhiteSpace(ConfirmPassword))
            {
                ModelState.AddModelError("", "All fields are required.");
                return View();
            }

            if (NewPassword != ConfirmPassword)
            {
                ModelState.AddModelError("ConfirmPassword", "Passwords do not match.");
                return View();
            }

            if (NewPassword.Length < 6)
            {
                ModelState.AddModelError("NewPassword", "New password must be at least 6 characters.");
                return View();
            }

            var userType = Session["UserType"].ToString();
            var userId = Session["UserID"].ToString();
            var currentHash = HashPassword(CurrentPassword);
            var newHash = HashPassword(NewPassword);

            using (var db = new BigBankEntities())
            {
                if (userType == "Customer")
                {
                    var cust = db.Customers.FirstOrDefault(c => c.CustID == userId);
                    if (cust == null) return RedirectToAction("Login");
                    if (cust.Password == null || !cust.Password.SequenceEqual(currentHash))
                    {
                        ModelState.AddModelError("CurrentPassword", "Current password is incorrect.");
                        return View();
                    }

                    db.Database.ExecuteSqlCommand("UPDATE Customer SET Password = @p0 WHERE CustID = @p1", newHash, userId);
                }
                else // Employee or Manager
                {
                    var emp = db.Employees.FirstOrDefault(e => e.EmpID == userId);
                    if (emp == null) return RedirectToAction("Login");
                    if (emp.Password == null || !emp.Password.SequenceEqual(currentHash))
                    {
                        ModelState.AddModelError("CurrentPassword", "Current password is incorrect.");
                        return View();
                    }

                    db.Database.ExecuteSqlCommand("UPDATE Employee SET Password = @p0 WHERE EmpID = @p1", newHash, userId);
                }
            }

            TempData["Message"] = "Password changed successfully!";
            return RedirectToAction("ChangePassword");
        }

        private byte[] HashPassword(string password)
        {
            using (var sha = SHA256.Create())
            {
                return sha.ComputeHash(Encoding.UTF8.GetBytes(password ?? string.Empty));
            }
        }

        [SessionAuthorize(RolesCsv = "Manager")]
        [NoCache]
        public ActionResult ManageAccounts()
        {
            var vm = new BigBank.Models.ManagerDashboardViewModel();
            using (var db = new BigBankEntities())
            {
                vm.SavingsCount = db.SavingsAccounts.Count();
                vm.FDCount = db.FDAccounts.Count();
                vm.LoanCount = db.LoanAccounts.Count();
                vm.TotalAccounts = vm.SavingsCount + vm.FDCount + vm.LoanCount;
            }
            return View(vm);
        }

        [SessionAuthorize(RolesCsv = "Manager")]
        [NoCache]
        public ActionResult ViewSavingsAccounts()
        {
            using (var db = new BigBankEntities())
            {
                var list = db.SavingsAccounts.OrderBy(s => s.SBAccountID).ToList();
                return View(list);
            }
        }

        [SessionAuthorize(RolesCsv = "Manager")]
        [NoCache]
        public ActionResult ViewFDAccounts()
        {
            using (var db = new BigBankEntities())
            {
                var list = db.FDAccounts.OrderBy(f => f.FDAccountID).ToList();
                return View(list);
            }
        }

        [SessionAuthorize(RolesCsv = "Manager")]
        [NoCache]
        public ActionResult ViewLoanAccounts()
        {
            using (var db = new BigBankEntities())
            {
                var list = db.LoanAccounts.OrderBy(l => l.LoanAccountID).ToList();
                return View(list);
            }
        }

        [SessionAuthorize(RolesCsv = "Manager")]
        public ActionResult OpenSavingsAccount()
        {
            return View();
        }

        // Lookup customer name by CustID for manager UI
        [SessionAuthorize(RolesCsv = "Manager")]
        public ActionResult LookupCustomerName(string id)
        {
            if (string.IsNullOrWhiteSpace(id))
                return Json(new { name = "" }, JsonRequestBehavior.AllowGet);

            using (var db = new BigBankEntities())
            {
                var cust = db.Customers.FirstOrDefault(c => c.CustID == id);
                var name = cust != null ? (cust.CustName ?? string.Empty).Trim() : string.Empty;
                return Json(new { name = name }, JsonRequestBehavior.AllowGet);
            }
        }

        // Lookup customer details and savings eligibility for FD (Manager UI)
        [SessionAuthorize(RolesCsv = "Manager")]
        [NoCache]
        public ActionResult LookupCustomerForFD(string id)
        {
            if (string.IsNullOrWhiteSpace(id))
                return Json(new { name = "" }, JsonRequestBehavior.AllowGet);

            using (var db = new BigBankEntities())
            {
                var cust = db.Customers.FirstOrDefault(c => c.CustID == id);
                if (cust == null)
                    return Json(new { name = "" }, JsonRequestBehavior.AllowGet);

                var savings = db.SavingsAccounts.FirstOrDefault(s => s.CustID == id);
                var age = (int)((DateTime.Today - cust.DOB).TotalDays / 365.25);

                return Json(new
                {
                    name = cust.CustName,
                    hasSavings = savings != null,
                    savingsAccountId = savings?.SBAccountID ?? "",
                    savingsBalance = savings?.Balance ?? 0,
                    isSenior = age >= 60
                }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        [SessionAuthorize(RolesCsv = "Manager")]
        [NoCache]
        public ActionResult OpenSavingsAccount(string CustID, decimal? InitialDeposit)
        {
            if (string.IsNullOrWhiteSpace(CustID) || !InitialDeposit.HasValue)
            {
                TempData["Error"] = "Customer ID and initial deposit are required.";
                return View();
            }

            if (InitialDeposit.Value < 1000m)
            {
                TempData["Error"] = "Minimum opening balance is 1000.";
                ViewBag.LastCustID = CustID;
                ViewBag.LastDeposit = InitialDeposit;
                return View();
            }

            string newId = null;
            using (var db = new BigBankEntities())
            {
                var cust = db.Customers.FirstOrDefault(c => c.CustID == CustID);
                if (cust == null)
                {
                    TempData["Error"] = "Customer not found.";
                    ViewBag.LastCustID = CustID;
                    ViewBag.LastDeposit = InitialDeposit;
                    return View();
                }

                // ensure customer doesn't already have a savings account (optional)
                if (db.SavingsAccounts.Any(s => s.CustID == CustID))
                {
                    TempData["Error"] = "Customer already has a savings account.";
                    ViewBag.LastCustID = CustID;
                    ViewBag.LastDeposit = InitialDeposit;
                    return View();
                }

                // create account and transaction in transaction
                using (var tx = db.Database.BeginTransaction())
                {
                    try
                    {
                        var sql = "INSERT INTO SavingsAccount (CustID, Balance, CreatedOn) OUTPUT INSERTED.SBAccountID VALUES (@cust, @bal, @created)";
                        newId = db.Database.SqlQuery<string>(sql, new SqlParameter("@cust", SqlDbType.VarChar) { Value = CustID }, new SqlParameter("@bal", SqlDbType.Decimal) { Value = InitialDeposit.Value }, new SqlParameter("@created", SqlDbType.DateTime) { Value = DateTime.Now }).FirstOrDefault();

                        db.Database.ExecuteSqlCommand("INSERT INTO SavingsTransaction (SBAccountID, TransactionDate, TransactionType, Amount, Remarks) VALUES (@p0,@p1,@p2,@p3,@p4)", newId, DateTime.Now, "D", InitialDeposit.Value, "Opening deposit by manager");

                        tx.Commit();
                        TempData["Success"] = "Savings account opened: " + newId;
                    }
                    catch (Exception ex)
                    {
                        tx.Rollback();
                        TempData["Error"] = "Failed to open account: " + ex.Message;
                        ViewBag.LastCustID = CustID;
                        ViewBag.LastDeposit = InitialDeposit;
                        return View();
                    }
                }
            }

            // return the same view and display the generated account id
            ViewBag.NewAccountId = newId;
            ViewBag.LastCustID = CustID;
            ViewBag.LastDeposit = InitialDeposit;
            return View();
        }

        // Open FD Account (Manager)
        [SessionAuthorize(RolesCsv = "Manager")]
        [NoCache]
        public ActionResult OpenFDAccount()
        {
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        [SessionAuthorize(RolesCsv = "Manager")]
        [NoCache]
        public ActionResult OpenFDAccount(string CustID, decimal? Amount, int? Tenure, DateTime? StartDate)
        {
            var errors = new List<string>();
            // Validate required fields
            if (string.IsNullOrWhiteSpace(CustID)) errors.Add("Customer ID is required.");
            if (!Amount.HasValue) errors.Add("FD amount is required.");
            if (!Tenure.HasValue) errors.Add("Tenure is required.");
            if (!StartDate.HasValue) errors.Add("Start date is required.");

            if (errors.Any())
            {
                TempData["Error"] = string.Join("<br/>", errors);
                ViewBag.LastCustID = CustID;
                return View();
            }

            if (Amount.Value < 10000m)
            {
                TempData["Error"] = "Minimum FD amount is Rs 10,000.";
                ViewBag.LastCustID = CustID;
                return View();
            }

            string newFDId = null;
            decimal maturityAmount = 0;
            decimal rate = 0;
            DateTime endDate = DateTime.MinValue;

            using (var db = new BigBankEntities())
            {
                var cust = db.Customers.FirstOrDefault(c => c.CustID == CustID);
                if (cust == null)
                {
                    TempData["Error"] = "Customer not found.";
                    ViewBag.LastCustID = CustID;
                    return View();
                }

                // Check if customer has savings account
                var sb = db.SavingsAccounts.FirstOrDefault(s => s.CustID == CustID);
                if (sb == null)
                {
                    TempData["Error"] = "Customer must have a savings account to open FD.";
                    ViewBag.LastCustID = CustID;
                    return View();
                }

                // Check sufficient balance
                if (sb.Balance < Amount.Value)
                {
                    TempData["Error"] = $"Insufficient savings balance. Available: Rs {sb.Balance:N2}";
                    ViewBag.LastCustID = CustID;
                    return View();
                }

                // Check minimum balance after deduction
                if (sb.Balance - Amount.Value < 1000m)
                {
                    TempData["Error"] = "Cannot open FD: Savings account must maintain minimum Rs 1,000 balance.";
                    ViewBag.LastCustID = CustID;
                    return View();
                }

                // Calculate interest rate based on tenure and senior citizen status
                var age = (int)((DateTime.Today - cust.DOB).TotalDays / 365.25);
                bool isSenior = age >= 60;

                decimal baseRate = Tenure.Value <= 1 ? 6.0m : (Tenure.Value == 2 ? 7.0m : 8.0m);
                if (isSenior) baseRate += 0.5m;
                rate = baseRate;

                // Calculate end date and maturity amount
                var start = StartDate.Value;
                endDate = start.AddYears(Tenure.Value);

                // Compound interest: A = P(1 + r/100)^t
                maturityAmount = Amount.Value * (decimal)Math.Pow((double)(1 + rate / 100m), Tenure.Value);

                try
                {
                    using (var tx = db.Database.BeginTransaction())
                    {
                        // Deduct from savings
                        var newBal = sb.Balance - Amount.Value;
                        db.Database.ExecuteSqlCommand("UPDATE SavingsAccount SET Balance = @p0 WHERE SBAccountID = @p1", newBal, sb.SBAccountID);

                        // Insert FD account
                        var sql = @"INSERT INTO FDAccount (CustomerID, StartDate, EndDate, Amount, InterestRate, MaturityAmount, Tenure, Status)
                                    OUTPUT INSERTED.FDAccountID
                                    VALUES (@cust, @start, @end, @amt, @rate, @maturity, @tenure, @status)";
                        
                        newFDId = db.Database.SqlQuery<string>(sql,
                            new SqlParameter("@cust", SqlDbType.VarChar) { Value = CustID },
                            new SqlParameter("@start", SqlDbType.Date) { Value = start },
                            new SqlParameter("@end", SqlDbType.Date) { Value = endDate },
                            new SqlParameter("@amt", SqlDbType.Decimal) { Value = Amount.Value },
                            new SqlParameter("@rate", SqlDbType.Decimal) { Value = rate },
                            new SqlParameter("@maturity", SqlDbType.Decimal) { Value = maturityAmount },
                            new SqlParameter("@tenure", SqlDbType.Int) { Value = Tenure.Value },
                            new SqlParameter("@status", SqlDbType.NVarChar) { Value = "Active" }
                        ).FirstOrDefault();

                        // Insert FD transaction - Use EmpID from session instead of Username
                        var processedBy = Session["UserID"] != null ? Session["UserID"].ToString() : null;
                        db.Database.ExecuteSqlCommand(
                            "INSERT INTO FDTransaction (FDAccountID, TransactionDate, TransactionType, Amount, InterestRate, MaturityAmount, ProcessedBy, Remarks) VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7)",
                            newFDId, DateTime.Now, "Open", Amount.Value, rate, maturityAmount, (object)processedBy ?? DBNull.Value, "FD opened by manager");

                        tx.Commit();

                        TempData["Success"] = $"FD account {newFDId} created successfully!";

                        // Pass details to view
                        ViewBag.NewFDId = newFDId;
                        ViewBag.CustomerName = CustID;
                        ViewBag.Amount = Amount.Value.ToString("N2");
                        ViewBag.Tenure = Tenure.Value;
                        ViewBag.Rate = rate.ToString("N1");
                        ViewBag.MaturityAmount = maturityAmount.ToString("N2");
                        ViewBag.EndDate = endDate.ToString("dd-MMM-yyyy");
                    }
                }
                catch (Exception ex)
                {
                    TempData["Error"] = "Failed to create FD account: " + ex.Message;
                    ViewBag.LastCustID = CustID;
                    return View();
                }
            }

            return View();
        }

        // Open Loan Account (with proper business rules)
        public ActionResult OpenLoanAccount()
        {
            if (Session["UserType"] == null || Session["UserType"].ToString() != "Customer")
                return RedirectToAction("Login");

            var vm = new OpenLoanViewModel();
            string custId = Session["UserID"].ToString();
            using (var db = new BigBankEntities())
            {
                var cust = db.Customers.FirstOrDefault(c => c.CustID == custId);
                if (cust != null)
                {
                    vm.CustomerDOB = cust.DOB;
                }
            }
            vm.StartDate = DateTime.Today;
            return View(vm);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult OpenLoanAccount(OpenLoanViewModel model)
        {
            if (!ModelState.IsValid)
                return View(model);

            if (model.LoanAmount < 10000m)
            {
                ModelState.AddModelError("LoanAmount", "Minimum Loan amount is 10000.");
                return View(model);
            }

            string custId = Session["UserID"].ToString();
            using (var db = new BigBankEntities())
            {
                var cust = db.Customers.FirstOrDefault(c => c.CustID == custId);
                if (cust == null)
                {
                    ModelState.AddModelError("", "Customer not found.");
                    return View(model);
                }

                // senior citizen check via DOB
                var age = (int)((DateTime.Today - cust.DOB).TotalDays / 365.25);
                bool isSenior = age >= 60;
                if (isSenior && model.LoanAmount > 100000m)
                {
                    ModelState.AddModelError("LoanAmount", "Senior Citizens cannot be sanctioned a loan greater than Rs. 1,00,000.");
                    return View(model);
                }

                // interest rate by amount with senior override
                decimal interestRate = isSenior ? 9.5m : (model.LoanAmount <= 500000m ? 10.0m : (model.LoanAmount <= 1000000m ? 9.5m : 9.0m));

                // compute EMI and totals
                int months = model.Tenure * 12;
                decimal monthlyRate = (interestRate / 100m) / 12m;
                decimal emi;
                if (monthlyRate > 0)
                {
                    double factor = Math.Pow(1 + (double)monthlyRate, months);
                    emi = model.LoanAmount * monthlyRate * (decimal)factor / ((decimal)factor - 1);
                }
                else
                {
                    emi = months > 0 ? model.LoanAmount / months : 0m;
                }
                emi = Math.Round(emi, 2);
                var totalPayable = emi * months;
                var endDate = model.StartDate.AddYears(model.Tenure);

                try
                {
                    using (var tx = db.Database.BeginTransaction())
                    {
                        var insertSql = @"INSERT INTO LoanAccount (CustomerID, StartDate, EndDate, LoanAmount, InterestRate, Tenure, TotalPayable, Status)
                                           OUTPUT INSERTED.LoanAccountID
                                           VALUES (@custId, @startDate, @endDate, @loanAmount, @interestRate, @tenure, @totalPayable, @status)";

                        var newLoanId = db.Database.SqlQuery<string>(insertSql,
                            new SqlParameter("@custId", custId),
                            new SqlParameter("@startDate", model.StartDate),
                            new SqlParameter("@endDate", endDate),
                            new SqlParameter("@loanAmount", model.LoanAmount),
                            new SqlParameter("@interestRate", interestRate),
                            new SqlParameter("@tenure", months),
                            new SqlParameter("@totalPayable", totalPayable),
                            new SqlParameter("@status", "Active")
                        ).FirstOrDefault();

                        // Initial loan transaction with Outstanding
                        var processedBy = Session["UserID"] != null ? Session["UserID"].ToString() : null;
                        db.Database.ExecuteSqlCommand(
                            "INSERT INTO LoanTransaction (LoanAccountID, EMIDate, Amount, Outstanding, ProcessedBy, Remarks) VALUES (@p0, @p1, @p2, @p3, @p4, @p5)",
                            newLoanId, DateTime.Now, 0, totalPayable, (object)processedBy ?? DBNull.Value, "Loan account opened");

                        tx.Commit();

                        TempData["Success"] = $"Loan account opened successfully!<br/>Account Number: {newLoanId}<br/>EMI Amount: Rs. {emi:N2}<br/>Interest Rate: {interestRate}%<br/>Total Payable: Rs. {totalPayable:N2}";
                    }
                }
                catch (Exception ex)
                {
                    ModelState.AddModelError("", "Failed to create loan account: " + ex.Message);
                    return View(model);
                }
            }

            return RedirectToAction("CustomerHome");
        }

        [SessionAuthorize(RolesCsv = "Manager")]
        [NoCache]
        public ActionResult WithdrawFD(string id = null)
        {
            if (string.IsNullOrWhiteSpace(id))
            {
                return View();
            }

            ViewBag.LastFDID = id;

            using (var db = new BigBankEntities())
            {
                var fd = db.FDAccounts.FirstOrDefault(f => f.FDAccountID == id);
                if (fd == null)
                {
                    TempData["Error"] = "FD account not found.";
                    return View();
                }

                var cust = db.Customers.FirstOrDefault(c => c.CustID == fd.CustomerID);
                ViewBag.FDAccountID = fd.FDAccountID;
                ViewBag.CustomerID = fd.CustomerID;
                ViewBag.CustomerName = cust != null ? cust.CustName : string.Empty;
                ViewBag.Amount = fd.Amount;
                ViewBag.InterestRate = fd.InterestRate;
                ViewBag.MaturityAmount = fd.MaturityAmount;
                ViewBag.Tenure = fd.Tenure;
                ViewBag.StartDate = fd.StartDate;
                ViewBag.EndDate = fd.EndDate;
                ViewBag.Status = fd.Status;
                ViewBag.IsMatured = fd.EndDate <= DateTime.Today && string.Equals(fd.Status, "Active", StringComparison.OrdinalIgnoreCase);

                return View();
            }
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        [SessionAuthorize(RolesCsv = "Manager")]
        [NoCache]
        public ActionResult WithdrawFD(string FDAccountID)
        {
            if (string.IsNullOrWhiteSpace(FDAccountID))
            {
                TempData["Error"] = "FD Account ID is required.";
                return RedirectToAction("WithdrawFD");
            }

            using (var db = new BigBankEntities())
            {
                var fd = db.FDAccounts.FirstOrDefault(f => f.FDAccountID == FDAccountID);
                if (fd == null)
                {
                    TempData["Error"] = "FD account not found.";
                    return RedirectToAction("WithdrawFD");
                }

                if (!string.Equals(fd.Status, "Active", StringComparison.OrdinalIgnoreCase))
                {
                    TempData["Error"] = "FD account is not active.";
                    return RedirectToAction("WithdrawFD", new { id = FDAccountID });
                }

                if (fd.EndDate > DateTime.Today)
                {
                    TempData["Error"] = "FD has not matured yet. Use Foreclose option if needed.";
                    return RedirectToAction("WithdrawFD", new { id = FDAccountID });
                }

                var custSavings = db.SavingsAccounts.FirstOrDefault(s => s.CustID == fd.CustomerID);
                if (custSavings == null)
                {
                    TempData["Error"] = "Savings account not found for customer to credit maturity amount.";
                    return RedirectToAction("WithdrawFD", new { id = FDAccountID });
                }

                var maturityAmount = fd.MaturityAmount ?? fd.Amount;

                using (var tx = db.Database.BeginTransaction())
                {
                    try
                    {
                        // Mark FD as closed
                        db.Database.ExecuteSqlCommand("UPDATE FDAccount SET Status = @p0 WHERE FDAccountID = @p1", "Closed", FDAccountID);

                        // Record FD transaction
                        var processedBy = Session["UserID"] != null ? Session["UserID"].ToString() : null;
                        db.Database.ExecuteSqlCommand(
                            "INSERT INTO FDTransaction (FDAccountID, TransactionDate, TransactionType, Amount, InterestRate, MaturityAmount, ProcessedBy, Remarks) VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7)",
                            FDAccountID, DateTime.Now, "Withdraw", maturityAmount, fd.InterestRate ?? 0, fd.MaturityAmount ?? maturityAmount, (object)processedBy ?? DBNull.Value, "FD maturity withdrawal");

                        // Credit to savings
                        var newBal = custSavings.Balance + maturityAmount;
                        db.Database.ExecuteSqlCommand("UPDATE SavingsAccount SET Balance = @p0 WHERE SBAccountID = @p1", newBal, custSavings.SBAccountID);
                        db.Database.ExecuteSqlCommand(
                            "INSERT INTO SavingsTransaction (SBAccountID, TransactionDate, TransactionType, Amount, Remarks) VALUES (@p0, @p1, @p2, @p3, @p4)",
                            custSavings.SBAccountID, DateTime.Now, "D", maturityAmount, "FD maturity payout");

                        tx.Commit();
                    }
                    catch (Exception ex)
                    {
                        tx.Rollback();
                        TempData["Error"] = "Withdrawal failed: " + ex.Message;
                        return RedirectToAction("WithdrawFD", new { id = FDAccountID });
                    }
                }

                TempData["Success"] = $"FD {FDAccountID} withdrawn successfully. Amount Rs {maturityAmount:N2} credited to Savings {custSavings.SBAccountID}.";
                return RedirectToAction("ViewFDAccounts");
            }
        }

        [SessionAuthorize(RolesCsv = "Manager")]
        [NoCache]
        public ActionResult LookupFDAccount(string id)
        {
            if (string.IsNullOrWhiteSpace(id))
                return Json(new { }, JsonRequestBehavior.AllowGet);

            using (var db = new BigBankEntities())
            {
                var fd = db.FDAccounts.FirstOrDefault(f => f.FDAccountID == id);
                if (fd == null)
                    return Json(new { }, JsonRequestBehavior.AllowGet);

                var cust = db.Customers.FirstOrDefault(c => c.CustID == fd.CustomerID);
                bool hasMatured = fd.EndDate <= DateTime.Today;

                return Json(new
                {
                    customerName = cust != null ? cust.CustName : string.Empty,
                    amount = fd.Amount,
                    interestRate = fd.InterestRate,
                    maturityAmount = fd.MaturityAmount,
                    tenure = fd.Tenure,
                    startDate = fd.StartDate.ToString("dd-MMM-yyyy"),
                    endDate = fd.EndDate.ToString("dd-MMM-yyyy"),
                    status = fd.Status,
                    hasMatured = hasMatured
                }, JsonRequestBehavior.AllowGet);
            }
        }
    }
}