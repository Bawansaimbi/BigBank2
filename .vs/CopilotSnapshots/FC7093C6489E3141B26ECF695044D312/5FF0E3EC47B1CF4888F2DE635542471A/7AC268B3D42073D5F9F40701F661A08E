using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Web;
using System.Web.Mvc;
using BigBank.Models;

namespace BigBank.Controllers
{
    public class HomeController : Controller
    {
        public ActionResult Index()
        {
            return View();
        }

        public ActionResult Contact()
        {
            ViewBag.Message = "Your contact page.";

            return View();
        }

        // GET: Login
        public ActionResult Login()
        {
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Login(string username, string password, string userType)
        {
            if (string.IsNullOrWhiteSpace(username) || string.IsNullOrWhiteSpace(password) || string.IsNullOrWhiteSpace(userType))
            {
                ModelState.AddModelError("", "Please provide username, password and user type.");
                return View();
            }

            var hashed = HashPassword(password);

            using (var db = new BigBankEntities())
            {
                if (userType == "Customer")
                {
                    var cust = db.Customers.FirstOrDefault(c => c.Username == username);
                    if (cust != null && cust.Password != null && cust.Password.SequenceEqual(hashed))
                    {
                        Session["UserType"] = "Customer";
                        Session["UserID"] = cust.CustID;
                        Session["Username"] = cust.Username;
                        return RedirectToAction("CustomerHome");
                    }
                }
                else
                {
                    var emp = db.Employees.FirstOrDefault(e => e.Username == username);
                    if (emp != null && emp.Password != null && emp.Password.SequenceEqual(hashed))
                    {
                        if ((userType == "Employee" && emp.EmpType == "E") || (userType == "Manager" && emp.EmpType == "M"))
                        {
                            Session["UserType"] = emp.EmpType == "M" ? "Manager" : "Employee";
                            Session["UserID"] = emp.EmpID;
                            Session["Username"] = emp.Username;
                            return RedirectToAction("Index");
                        }
                    }
                }
            }

            ModelState.AddModelError("", "Invalid username, password or user type.");
            return View();
        }

        // GET: Register
        public ActionResult Register()
        {
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Register(RegisterViewModel model)
        {
            if (!ModelState.IsValid)
                return View(model);

            using (var db = new BigBankEntities())
            {
                // unique username across customers and employees
                if (db.Customers.Any(c => c.Username == model.Username) || db.Employees.Any(e => e.Username == model.Username))
                {
                    ModelState.AddModelError("Username", "Username already exists. Please choose a different username.");
                    return View(model);
                }

                // PAN must not exist in employees
                if (db.Employees.Any(e => e.PAN == model.PAN))
                {
                    ModelState.AddModelError("PAN", "PAN belongs to an employee or manager. Employees and managers cannot register as customers.");
                    return View(model);
                }

                var sql = @"INSERT INTO Customer (CustName, Gender, DOB, PAN, PhoneNum, Address, Username, Password)
                            VALUES (@name, @gender, @dob, @pan, @phone, @addr, @username, @pwd)";

                var pwd = HashPassword(model.Password);

                var parameters = new[] {
                    // sizes/types aligned with EDMX / DB schema
                    new SqlParameter("@name", SqlDbType.NVarChar, 50) { Value = (object)model.CustName ?? DBNull.Value },
                    new SqlParameter("@gender", SqlDbType.Char, 1) { Value = (object)model.Gender ?? DBNull.Value },
                    new SqlParameter("@dob", SqlDbType.Date) { Value = model.DOB },
                    // PAN is CHAR(8) in database
                    new SqlParameter("@pan", SqlDbType.Char, 8) { Value = (object)model.PAN ?? DBNull.Value },
                    new SqlParameter("@phone", SqlDbType.NVarChar, 15) { Value = (object)model.PhoneNum ?? DBNull.Value },
                    new SqlParameter("@addr", SqlDbType.NVarChar, 100) { Value = (object)model.Address ?? DBNull.Value },
                    new SqlParameter("@username", SqlDbType.NVarChar, 50) { Value = (object)model.Username ?? DBNull.Value },
                    // Password column is varbinary(64) in EDMX
                    new SqlParameter("@pwd", SqlDbType.VarBinary, 64) { Value = (object)pwd ?? DBNull.Value }
                };

                db.Database.ExecuteSqlCommand(sql, parameters);
            }

            TempData["Message"] = "Registration successful. You can now login.";
            return RedirectToAction("Login");
        }

        public ActionResult Logout()
        {
            Session.Clear();
            return RedirectToAction("Index");
        }

        public ActionResult CustomerHome()
        {
            if (Session["UserType"] == null || Session["UserType"].ToString() != "Customer")
                return RedirectToAction("Login");

            string custId = Session["UserID"].ToString();
            var vm = new CustomerDashboardViewModel();

            using (var db = new BigBankEntities())
            {
                var sb = db.SavingsAccounts.FirstOrDefault(s => s.CustID == custId);
                if (sb != null)
                {
                    vm.SavingsAccountID = sb.SBAccountID;
                    vm.SavingsBalance = sb.Balance;
                }

                vm.FDAccountIDs = db.FDAccounts.Where(f => f.CustomerID == custId).Select(f => f.FDAccountID).ToList();
                vm.LoanAccountIDs = db.LoanAccounts.Where(l => l.CustomerID == custId).Select(l => l.LoanAccountID).ToList();

                vm.TotalBalance = (vm.SavingsBalance ?? 0) + db.FDAccounts.Where(f => f.CustomerID == custId).Sum(f => (decimal?)f.Amount) ?? 0 + db.LoanAccounts.Where(l => l.CustomerID == custId).Sum(l => (decimal?)0) ?? 0;
            }

            return View(vm);
        }

        // Open Savings
        public ActionResult OpenSavings()
        {
            if (Session["UserType"] == null || Session["UserType"].ToString() != "Customer")
                return RedirectToAction("Login");

            var vm = new OpenSavingsViewModel();
            return View(vm);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult OpenSavings(OpenSavingsViewModel model)
        {
            if (!ModelState.IsValid)
                return View(model);

            if (model.InitialBalance < 1000m)
            {
                ModelState.AddModelError("InitialBalance", "Minimum opening balance is 1000.");
                return View(model);
            }

            string custId = Session["UserID"].ToString();
            string newId = null;
            using (var db = new BigBankEntities())
            {
                var sql = @"INSERT INTO SavingsAccount (CustID, Balance) OUTPUT INSERTED.SBAccountID VALUES (@cust, @bal)";
                var res = db.Database.SqlQuery<string>(sql, new SqlParameter("@cust", SqlDbType.VarChar) { Value = custId }, new SqlParameter("@bal", SqlDbType.Decimal) { Value = model.InitialBalance }).FirstOrDefault();
                newId = res;
            }

            TempData["Message"] = "Savings Account opened: " + newId;
            return RedirectToAction("CustomerHome");
        }

        // Open FD
        public ActionResult OpenFD()
        {
            if (Session["UserType"] == null || Session["UserType"].ToString() != "Customer")
                return RedirectToAction("Login");

            return View(new OpenFDViewModel());
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult OpenFD(OpenFDViewModel model)
        {
            if (!ModelState.IsValid)
                return View(model);

            if (model.Amount < 10000m)
            {
                ModelState.AddModelError("Amount", "Minimum FD amount is 10000.");
                return View(model);
            }

            string custId = Session["UserID"].ToString();
            using (var db = new BigBankEntities())
            {
                var sql = @"INSERT INTO FDAccount (CustomerID, StartDate, EndDate, Amount, InterestRate, Tenure, Status) VALUES (@cust, @start, @end, @amt, @irate, @tenure, @status)";
                var parameters = new[] {
                    new SqlParameter("@cust", SqlDbType.VarChar) { Value = custId },
                    new SqlParameter("@start", SqlDbType.Date) { Value = model.StartDate },
                    new SqlParameter("@end", SqlDbType.Date) { Value = model.EndDate },
                    new SqlParameter("@amt", SqlDbType.Decimal) { Value = model.Amount },
                    new SqlParameter("@irate", SqlDbType.Decimal) { Value = model.InterestRate },
                    new SqlParameter("@tenure", SqlDbType.Int) { Value = model.Tenure },
                    new SqlParameter("@status", SqlDbType.NVarChar) { Value = "Active" }
                };

                db.Database.ExecuteSqlCommand(sql, parameters);

                // read latest FDAccountID for customer
                var fdid = db.FDAccounts.Where(f => f.CustomerID == custId).OrderByDescending(f => f.FDAuto).Select(f => f.FDAccountID).FirstOrDefault();
                TempData["Message"] = "FD opened: " + fdid;
            }

            return RedirectToAction("CustomerHome");
        }

        // Open Loan
        public ActionResult OpenLoan()
        {
            if (Session["UserType"] == null || Session["UserType"].ToString() != "Customer")
                return RedirectToAction("Login");

            return View(new OpenLoanViewModel());
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult OpenLoan(OpenLoanViewModel model)
        {
            if (!ModelState.IsValid)
                return View(model);

            if (model.LoanAmount < 10000m)
            {
                ModelState.AddModelError("LoanAmount", "Minimum Loan amount is 10000.");
                return View(model);
            }

            string custId = Session["UserID"].ToString();
            using (var db = new BigBankEntities())
            {
                var sql = @"INSERT INTO LoanAccount (CustomerID, StartDate, EndDate, LoanAmount, InterestRate, Tenure, Status) VALUES (@cust, @start, @end, @amt, @irate, @tenure, @status)";
                var parameters = new[] {
                    new SqlParameter("@cust", SqlDbType.VarChar) { Value = custId },
                    new SqlParameter("@start", SqlDbType.Date) { Value = model.StartDate },
                    new SqlParameter("@end", SqlDbType.Date) { Value = model.EndDate },
                    new SqlParameter("@amt", SqlDbType.Decimal) { Value = model.LoanAmount },
                    new SqlParameter("@irate", SqlDbType.Decimal) { Value = model.InterestRate },
                    new SqlParameter("@tenure", SqlDbType.Int) { Value = model.Tenure },
                    new SqlParameter("@status", SqlDbType.NVarChar) { Value = "Active" }
                };

                db.Database.ExecuteSqlCommand(sql, parameters);

                var lnid = db.LoanAccounts.Where(l => l.CustomerID == custId).OrderByDescending(l => l.LNAuto).Select(l => l.LoanAccountID).FirstOrDefault();
                TempData["Message"] = "Loan opened: " + lnid;
            }

            return RedirectToAction("CustomerHome");
        }

        private byte[] HashPassword(string password)
        {
            using (var sha = SHA256.Create())
            {
                return sha.ComputeHash(Encoding.UTF8.GetBytes(password ?? string.Empty));
            }
        }
    }
}